{"version":3,"sources":["api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistList/todolists-reducer.ts","features/todolistList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/todolistList/todolist/task/Task.tsx","features/todolistList/todolist/Todolist.tsx","features/todolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","title","props","console","log","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","disabled","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","instance","Axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","todolistAPI","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialazed","login","setInitialazedAC","setLoginNameAC","appReducer","RemoveTodolistAC","index","findIndex","tl","splice","AddTodolistAC","unshift","todolist","filter","entityStatus","ChangeTodolistTitleAC","ChangeTodolistFilterAC","SetTodolistAC","todolists","map","changeTodolistEntityStatusAC","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","push","updateTaskAC","updateModel","setTaskAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTask","getState","a","tasks1","find","description","priority","startDate","deadline","res","resultCode","EditableSpan","editMode","setEditMode","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","changeTaskTitle","key","style","Checkbox","Delete","TodoList","useDispatch","useEffect","items","reverse","tasksForTodolist","r","onClickAllHandler","changeFilter","onClickActiveHandler","onClicCompletedHandler","onClickRemoveTodoList","removeTodolist","addTasks","changeTodoListTitle","Button","size","margin","TodolistList","demo","useSelector","todoLists","auth","item","createTask","removeTaskTC","changeStatus","removeTodolistTC","addTodoList","createTodolist","newTitile","todolistdId","Grid","container","padding","spacing","el","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","getFieldProps","touched","type","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","height","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.f01dc771.chunk.js","sourcesContent":["import  Axios  from 'axios';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"9209cc73-1dd6-4bef-bbf6-e01b3e14b107\",\r\n    },\r\n})\r\n\r\n// API\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title:string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title:title})\r\n    },\r\n    deleteTodolist(id:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id:string,title:string){\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title:title})\r\n    },\r\n    getTasksTodolist(todolistId:string){\r\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType ){\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgenty = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\ntype GetResponseTaskType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string |  null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type UpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n    title?: string\r\n}\r\n\r\nexport const AddItemForm = React.memo(({title = 'Title', ...props}:AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        if(error){\r\n            setError(null)\r\n        }\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n      <div>\r\n        <TextField\r\n          disabled={props.disabled}\r\n          variant=\"outlined\"\r\n          value={newTasktitle}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          label={title}\r\n          helperText={error}\r\n          error={!!error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={buttonAddItem} disabled={props.disabled}>\r\n          <LibraryAdd fontSize=\"large\" />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n})","import { Dispatch } from 'redux';\r\nimport  { ResponseType } from '../api/todolist-api'\r\nimport { setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../app/app-reducer';\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some ERROR'}))\r\n    }\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error:{message:string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC({status:'failed'}))\r\n    dispatch(setAppErrorAC({error: error.message?error.message:'Some error'}))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import { setLoginNameAC, SetLoginNameType, SetInitialazedType, setInitialazedAC } from './../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\nimport { authAPI, LoginParamsType } from './../../api/todolist-api';\r\nimport { Dispatch } from 'redux'\r\nimport { SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer'\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{value: boolean}>){\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\n\r\n// actions\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: DispatchType) => {\r\n        dispatch(setInitialazedAC({isInitialazed:false}))\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value:true}))\r\n            let data = await authAPI.me()\r\n            dispatch(setLoginNameAC({login:data.data.data.login}))\r\n            dispatch(setInitialazedAC({isInitialazed:true}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setLoginNameAC({login:'you are not logged in'}))\r\n            dispatch(setIsLoggedInAC({value:false}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// types\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\ntype DispatchType = Dispatch<\r\n| SetIsLoggedInType \r\n| SetAppStatusType \r\n| SetAppErrorType \r\n| SetInitialazedType \r\n| SetLoginNameType>\r\n\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { setIsLoggedInAC, SetIsLoggedInType } from './../features/login/auth-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { authAPI } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialazed: false,\r\n    login: 'you are not logged in',\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState: initialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{status:RequestStatusType}>){\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{error: string|null}>){\r\n            state.error = action.payload.error\r\n        },\r\n        setInitialazedAC(state, action: PayloadAction<{isInitialazed: boolean}>){\r\n            state.isInitialazed = action.payload.isInitialazed\r\n        },\r\n        setLoginNameAC(state, action: PayloadAction<{login: string}>){\r\n            state.login = action.payload.login\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\n\r\n// actions\r\nexport const { setAppStatusAC, setAppErrorAC, setInitialazedAC, setLoginNameAC } = slice.actions\r\n\r\n// thunks\r\nexport const initialazedTC = () => async (dispatch: DispatchType) => {\r\n    try {\r\n        let res = await authAPI.me()\r\n        dispatch(setInitialazedAC({ isInitialazed: true }))\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setLoginNameAC({ login:res.data.data.login }))\r\n            dispatch(setIsLoggedInAC({ value:true }))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n//types\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetInitialazedType = ReturnType<typeof setInitialazedAC>\r\nexport type SetLoginNameType = ReturnType<typeof setLoginNameAC>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n       status: RequestStatusType\r\n       error: string|null\r\n       isInitialazed: boolean\r\n       login: string\r\n    }\r\ntype DispatchType = Dispatch<SetInitialazedType | SetAppStatusType | SetAppErrorType | SetIsLoggedInType | SetLoginNameType>\r\n","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { todolistAPI } from '../../api/todolist-api';\r\nimport { TodolistType } from '../../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: initialState,\r\n    reducers: {\r\n        RemoveTodolistAC:(state, action: PayloadAction<{ todolistId: string }>)=>{\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todolistId)\r\n            state.splice(index,1)\r\n        },\r\n        AddTodolistAC:(state, action: PayloadAction<{ todolist: TodolistType }>)=>{\r\n            state.unshift({ ...action.payload.todolist, filter:\"all\", entityStatus: 'idle'})\r\n        },\r\n        ChangeTodolistTitleAC:(state, action: PayloadAction<{ todolistId: string, title: string }>)=>{\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todolistId)\r\n            state[index].title = action.payload.title\r\n        },\r\n        ChangeTodolistFilterAC:(state, action: PayloadAction<{ todolistId: string, filter: filtersValueType }>)=>{\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todolistId)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        SetTodolistAC:(state, action: PayloadAction<{ todolists: TodolistType[] }>)=>{\r\n            return action.payload.todolists.map(tl=>({...tl, filter:'all', entityStatus: 'idle'}))\r\n        },\r\n        changeTodolistEntityStatusAC:(state, action: PayloadAction<{ entityStatus: RequestStatusType, todolistId:string }>)=>{\r\n            const index = state.findIndex(tl=>tl.id===action.payload.todolistId)\r\n            state[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n//action\r\nexport const { RemoveTodolistAC, AddTodolistAC, ChangeTodolistTitleAC, \r\n    ChangeTodolistFilterAC, SetTodolistAC, changeTodolistEntityStatusAC} = slice.actions\r\n//thunks\r\nexport const fetchTodolists = () => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await todolistAPI.getTodolists()\r\n        dispatch(SetTodolistAC({todolists:res.data}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({entityStatus:'loading', todolistId}))\r\n    try {\r\n        let res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC({todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTodolist = (title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(AddTodolistAC({todolist:res.data.data.item}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTodolist = (todolistId: string, title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await todolistAPI.updateTodolistTitle(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(ChangeTodolistTitleAC({todolistId, title}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof SetTodolistAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionType = \r\n| RemoveTodolistActionType\r\n| AddTodolistActionType\r\n| SetTodolistsActionType\r\n| ReturnType<typeof ChangeTodolistTitleAC>\r\n| ReturnType<typeof ChangeTodolistFilterAC>\r\n| ChangeTodolistEntityStatusType\r\n\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filtersValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype DispatchTodolistType = ActionType|SetAppStatusType|SetAppErrorType","import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppRootStateType } from '../../app/store';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskType, todolistAPI, UpdateTaskModelType, UpdateModelType } from '../../api/todolist-api';\r\nimport { RemoveTodolistActionType, SetTodolistsActionType, AddTodolistActionType, AddTodolistAC, SetTodolistAC, RemoveTodolistAC } from './todolists-reducer';\r\nimport { TasksStateType } from '../../app/App';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: initialState,\r\n    reducers: {\r\n        removeTaskAC: (state, action: PayloadAction<{ taskId: string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t=>t.id===action.payload.taskId)\r\n            tasks.splice(index, 1)  \r\n        },\r\n        addTaskAC: (state, action: PayloadAction<{ task: TaskType }>) => {\r\n            state[action.payload.task.todoListId].push({...action.payload.task, entityStatus: 'idle'})\r\n        },\r\n        updateTaskAC: (state, action: PayloadAction<{ taskId: string, updateModel: UpdateModelType, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t=>t.id===action.payload.taskId)\r\n            tasks[index] = {...tasks[index], ...action.payload.updateModel}\r\n        },\r\n        setTaskAC: (state, action: PayloadAction<{ tasks:TaskType[], todolistId: string }>) => {\r\n            state[action.payload.todolistId] = action.payload.tasks.map(t=>({...t, entityStatus: 'idle'}))\r\n        },\r\n        changeTaskEntityStatusAC: (state, action: PayloadAction<{ entityStatus: RequestStatusType, taskId:string, todolistId: string }>) => {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t=>t.id===action.payload.taskId)\r\n            tasks[index].entityStatus = action.payload.entityStatus\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(AddTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        });\r\n        builder.addCase(SetTodolistAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        });\r\n        builder.addCase(RemoveTodolistAC, (state, action) => {\r\n            delete state[action.payload.todolistId]\r\n        });\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// action\r\nexport const { removeTaskAC, addTaskAC, updateTaskAC, \r\n    setTaskAC, changeTaskEntityStatusAC } = slice.actions\r\n// thunk\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await todolistAPI.getTasksTodolist(todolistId)\r\n        let tasks = res.data.items.reverse()\r\n        dispatch(setTaskAC({tasks, todolistId}))\r\n        dispatch(setAppStatusAC({status:'succeeded'}))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    dispatch(changeTaskEntityStatusAC({entityStatus:'loading', taskId, todolistId}))\r\n    try {\r\n        let res = await todolistAPI.deleteTask(todolistId, taskId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC({taskId, todolistId}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (title: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC({status:'loading'}))\r\n    try {\r\n        let res = await todolistAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC({task:res.data.data.item}))\r\n            dispatch(setAppStatusAC({status:'succeeded'}))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (taskId: string, updateModel: UpdateModelType, todolistId: string) =>\r\n    async (dispatch: DispatchTaskType, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC({status:'loading'}))\r\n        dispatch(changeTaskEntityStatusAC({entityStatus:'loading', taskId, todolistId}))\r\n        const task = getState().tasks1[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            let model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...updateModel\r\n            }\r\n            try {\r\n                let res = await todolistAPI.updateTask(todolistId, taskId, model)\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC({taskId, updateModel, todolistId}))\r\n                    dispatch(setAppStatusAC({status:'succeeded'}))\r\n                    dispatch(changeTaskEntityStatusAC({entityStatus:'succeeded', taskId, todolistId}))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC({entityStatus:'failed', taskId, todolistId}))\r\n                }\r\n            } catch (error) {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC({entityStatus:'failed', taskId, todolistId}))\r\n            }\r\n        }\r\n    }\r\n// types\r\ntype ActionType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTaskAC>\r\n| ReturnType<typeof changeTaskEntityStatusAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\ntype DispatchTaskType = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\nexport type EditableSpanPropsType = {\r\n  disabled: boolean\r\n  isDone?: boolean;\r\n  title: string;\r\n  onChange: (newTitle: string) => void;\r\n};\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  console.log(\"EditableSpan\");\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [title, setTitle] = useState(\"\");\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const activateEditMode = () => {\r\n    if(props.disabled){\r\n      setEditMode(true);\r\n      setTitle(props.title);\r\n    }\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      onBlur={activateViewMode}\r\n      autoFocus\r\n    />\r\n  ) : (\r\n    <span\r\n      onDoubleClick={activateEditMode}\r\n      title={\"to change it use a double click\"}\r\n      className={props.isDone ? \"is-done\" : \"\"}\r\n    >\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport {  Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\r\nimport { TaskStatuses, TaskDomainType } from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    id:string\r\n    task: TaskDomainType\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n}\r\n \r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n  const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.id),[props.removeTask,props.task.id, props.id]);\r\n  const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.id);\r\n  },[props.changeTaskStatus, props.task.id, props.id])\r\n  const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n    props.changeTaskTitle(props.task.id, newTitle, props.id);\r\n  },[props.changeTaskTitle,props.task.id,props.id]);\r\n  return (\r\n    <div key={props.task.id} style={{ fontSize: \"19px\" }}>\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={props.task.status===TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan\r\n        disabled={props.task.entityStatus!=='loading'}\r\n        onChange={onChangeTitleHandler}\r\n        title={props.task.title}\r\n        isDone={props.task.status===TaskStatuses.Completed}\r\n      />\r\n      <IconButton onClick={onRemoveHandler} disabled={props.task.entityStatus==='loading'}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});","import { Button,  IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { TaskStatuses, TaskDomainType } from '../../../api/todolist-api';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport { fetchTasks } from '../tasks-reducer';\r\nimport { filtersValueType, TodolistDomainType } from '../todolists-reducer';\r\nimport { Task } from './task/Task';\r\n\r\nexport type TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses,todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(()=>{\r\n    dispatch(fetchTasks(props.todolist.id))\r\n  },[])\r\n  console.log('TodoList');\r\n  let tasksForTodolist = props.tasks\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.Completed);\r\n  }\r\n    const onClickAllHandler = useCallback(() => props.changeFilter('all',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickActiveHandler = useCallback(() => props.changeFilter('active',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClicCompletedHandler = useCallback(() => props.changeFilter('completed',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickRemoveTodoList = useCallback(()=>props.removeTodolist(props.todolist.id), [props.todolist.id, props.removeTodolist])\r\n    const addItem = useCallback((title:string)=>props.addTasks(title,props.todolist.id),[props.addTasks, props.todolist.id])\r\n    const changeTodoListTitle=useCallback((newTitle:string)=>props.changeTodoListTitle(newTitle,props.todolist.id),[props.changeTodoListTitle,props.todolist.id])\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} disabled={props.todolist.entityStatus!=='loading'}/>\r\n          <IconButton onClick={onClickRemoveTodoList} disabled={props.todolist.entityStatus==='loading'}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} disabled={props.todolist.entityStatus==='loading'}/>\r\n        <div>\r\n          {tasksForTodolist.map((t) => {\r\n            return <Task changeTaskStatus={props.changeTaskStatus}\r\n                         changeTaskTitle={props.changeTaskTitle}\r\n                         removeTask={props.removeTask}\r\n                         task={t}\r\n                         id={props.todolist.id}\r\n                         key={t.id}/>\r\n            })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n})\r\nexport default TodoList;\r\n\r\n","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { TaskStatuses } from \"../../api/todolist-api\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { createTask, removeTaskTC, updateTask } from \"./tasks-reducer\";\r\nimport TodoList from \"./todolist/Todolist\";\r\nimport {\r\n  ChangeTodolistFilterAC,\r\n  createTodolist,\r\n  fetchTodolists,\r\n  filtersValueType,\r\n  removeTodolistTC,\r\n  updateTodolist,\r\n} from \"./todolists-reducer\";\r\n\r\ntype TodoPropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<TodoPropsType> = ({demo = false}) => {\r\n  const dispatch = useDispatch();\r\n  const { todoLists, tasks1 } = useSelector<AppRootStateType, AppRootStateType>(\r\n    (state) => state\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n  useEffect(() => {\r\n    if(demo||!isLoggedIn){\r\n      return\r\n    }\r\n    dispatch(fetchTodolists());\r\n  }, []);\r\n\r\n  const addTasks = useCallback(\r\n    (title: string, todolistId: string) => {\r\n      dispatch(createTask(title, todolistId));\r\n      changeFilter(\"all\", todolistId);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTask = useCallback(\r\n    (id: string, todolistId: string) => {\r\n      dispatch(removeTaskTC(id, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeStatus = useCallback(\r\n    (id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTask(id, { status }, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeFilter = useCallback(\r\n    (filter: filtersValueType, todolistId: string) => {\r\n      dispatch(ChangeTodolistFilterAC({todolistId, filter}));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTodolist = useCallback(\r\n    (todolistId: string) => {\r\n      dispatch(removeTodolistTC(todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      dispatch(createTodolist(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTask(id, { title: newTitile }, todolistdId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTodolist(todolistdId, newTitile));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"10px\" }}>\r\n        <AddItemForm addItem={addTodoList} title={'Title for your new list'} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((el) => {\r\n          let tasksForTodolist = tasks1[el.id];\r\n          return (\r\n            <Grid item key={el.id}>\r\n              <Paper elevation={8} style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                  todolist={el}\r\n                  tasks={tasksForTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTasks={addTasks}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType,string|null>(state=>state.app.error) \r\n  const dispatch = useDispatch()  \r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC({error: null}))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error?error:'Some error'}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n     \r\n    const formik = useFormik({\r\n      initialValues: {\r\n        email: \"\",\r\n        password: \"\",\r\n        rememberMe: false,\r\n      },\r\n      validate: (values) => {\r\n        const errors: FormikErrorType = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        if(!values.password){\r\n            errors.password = \"Required\";\r\n        } else if (values.password.length<4){\r\n            errors.password = \"Invalid password. Min length 4 symbol\";\r\n        }\r\n        return errors;\r\n      },\r\n      onSubmit: (values) => {\r\n        dispatch(loginTC(values))\r\n      },\r\n    });\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n   return (\r\n     <Grid container justify=\"center\">\r\n       <Grid item xs={4}>\r\n         <FormControl>\r\n           <FormLabel>\r\n             <p>\r\n               To log in get registered\r\n               <a\r\n                 href={\"https://social-network.samuraijs.com/\"}\r\n                 target={\"blank\"}\r\n               >\r\n                 here\r\n               </a>\r\n             </p>\r\n             <p>or use common test account credentials:</p>\r\n             <p>Email: blablabla</p>\r\n             <p>Password: ********</p>\r\n           </FormLabel>\r\n           <form onSubmit={formik.handleSubmit}>\r\n             <FormGroup>\r\n               <TextField\r\n                 label=\"Email\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"email\")}\r\n               />\r\n               {formik.touched.email&&formik.errors.email\r\n               ?<div style={{color:'red'}}>{formik.errors.email}</div>\r\n               :null}\r\n               <TextField\r\n                 type=\"password\"\r\n                 label=\"Password\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"password\")}\r\n               />\r\n               {formik.touched.password&&formik.errors.password\r\n               ?<div style={{color:'red'}}>{formik.errors.password}</div>\r\n               :null}\r\n               <FormControlLabel\r\n                 label={\"Remember me\"}\r\n                 control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n               />\r\n               <Button disabled={!!formik.errors.email||!!formik.errors.password} type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                 Login\r\n               </Button>\r\n             </FormGroup>\r\n           </form>\r\n         </FormControl>\r\n       </Grid>\r\n     </Grid>\r\n   );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {  TaskDomainType } from '../api/todolist-api';\r\nimport { TodolistList } from '../features/todolistList/TodolistList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { initialazedTC, RequestStatusType } from './app-reducer';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from '../features/login/login';\r\nimport { logoutTC } from '../features/login/auth-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key:string]:Array<TaskDomainType>\r\n} \r\ntype AppPropsType = {\r\n  demo?: boolean\r\n}\r\ntype appStateType = {\r\n  login:string|null \r\n  status: RequestStatusType \r\n  isInitialazed: boolean\r\n}\r\n\r\nfunction AppWithRedux({demo = false}: AppPropsType) {\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    const { login, status, isInitialazed } = useSelector<AppRootStateType, appStateType>(state=>state.app)\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n      dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(()=>{\r\n      !demo && dispatch(initialazedTC())\r\n    },[])\r\n    if (!isInitialazed) {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"30%\",\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">{login}</Typography>\r\n            {isLoggedIn&&<Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n          </Toolbar>\r\n          <div style={{height:'4px'}}>\r\n            {status==='loading'&&<LinearProgress/>}\r\n          </div>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Switch>\r\n            <Route exact path = {'/'} render={() => <TodolistList demo={demo}/>} />\r\n            <Route path = {'/login'} render={() => <Login/>} />\r\n            <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n            <Redirect from={ '*' } to={ '/404' }/>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { authReducer } from './../features/login/auth-reducer';\r\nimport { appReducer } from './app-reducer';\r\nimport { tasksReducer } from '../features/todolistList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/todolistList/todolists-reducer';\r\nimport { combineReducers } from \"redux\";\r\nimport {configureStore} from '@reduxjs/toolkit'\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks1: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// export const store = createStore(rootReducer,applyMiddleware(thunk))\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunk)\r\n})\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppWithRedux from \"./app/App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./app/store\";\r\nimport { HashRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <HashRouter>\r\n    <Provider store={store}>\r\n      <AppWithRedux />\r\n    </Provider>\r\n  </HashRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}