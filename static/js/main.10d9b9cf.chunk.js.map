{"version":3,"sources":["api/todolist-api.ts","AddItemForm.tsx","EditableSpan.tsx","state/tasks-reducer.ts","Task.tsx","Todolist.tsx","state/todolists-reducer.ts","AppWithRedux.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","instance","Axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","todolistId","taskId","model","EditableSpan","editMode","setEditMode","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","initState","updateTask","updateModel","dispatch","getState","task","tasks1","find","t","description","status","priority","startDate","deadline","then","res","type","updateTaskAC","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","changeTaskTitle","key","style","Checkbox","Delete","TodoList","useDispatch","useEffect","tasks","data","items","reverse","setTaskAC","tasksForTodolist","filter","r","onClickAllHandler","changeFilter","onClickActiveHandler","onClicCompletedHandler","onClickRemoveTodoList","removeTodolist","addTasks","changeTodoListTitle","map","Button","size","margin","AppWithRedux","useSelector","state","todoLists","todolists","item","createTask","removeTaskAC","removeTaskTC","changeStatus","ChangeTodolistFilterAC","RemoveTodolistAC","removeTodolistTC","addTodoList","todolist","createTodolist","newTitile","todolistdId","ChangeTodolistTitleAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","el","Paper","elevation","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","newState","todoListId","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.10d9b9cf.chunk.js","sourcesContent":["import  Axios  from 'axios';\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"9209cc73-1dd6-4bef-bbf6-e01b3e14b107\",\r\n    },\r\n})\r\n\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\ntype ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgenty = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\ntype GetResponseTaskType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string |  null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type UpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\n \r\n\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title:string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title:title})\r\n    },\r\n    deleteTodolist(id:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id:string,title:string){\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title:title})\r\n    },\r\n    getTasksTodolist(todolistId:string){\r\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType ){\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}","import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        if(error){\r\n            setError(null)\r\n        }\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n    <TextField\r\n        variant='outlined'\r\n        value={newTasktitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label='Title'\r\n        helperText={error}\r\n        error={!!error} />\r\n    <IconButton color='primary' onClick={buttonAddItem}>\r\n        <LibraryAdd fontSize='large'/>\r\n    </IconButton>\r\n</div>\r\n})","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\nexport type EditableSpanPropsType={\r\n    isDone?:boolean\r\n    title:string\r\n    onChange:(newTitle:string)=>void\r\n}\r\nexport const EditableSpan = React.memo((props:EditableSpanPropsType) => {\r\n    console.log('EditableSpan');\r\n    let [editMode,setEditMode]=useState<boolean>(false)\r\n    let [title,setTitle]=useState('')\r\n    const activateViewMode =()=>{\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const changeTitle=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n    ?<TextField value={title} onChange={changeTitle} onBlur={activateViewMode} autoFocus/>\r\n    : <span \r\n        onDoubleClick={activateEditMode} \r\n        title={'to change it use a double click'}\r\n        className={props.isDone ? \"is-done\" : \"\"}\r\n        >{props.title}</span>\r\n})","import { AppRootStateType } from './store';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskType, todolistAPI, UpdateTaskModelType, UpdateModelType } from './../api/todolist-api';\r\nimport { RemoveTodolistActionType, SetTodolistsActionType } from './todolists-reducer';\r\nimport { AddTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from './../App';\r\n\r\n\r\nexport type ActionType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof setTaskAC>\r\n    | AddTodolistActionType\r\n    | RemoveTodolistActionType\r\n    | SetTodolistsActionType\r\n\r\nlet initState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initState, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return {\r\n                ...state, \r\n                [action.task.todoListId]: [...state[action.task.todoListId], action.task]\r\n            }\r\n        case 'UPDATE_TASK': {\r\n            return {\r\n                ...state, [action.todolistId]: state[action.todolistId]\r\n                    .map(el => el.id === action.taskId ? { ...el, ...action.updateModel } : el)\r\n            }\r\n        }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = { ...state }\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': {\r\n            return {...state,[action.todolistId]:action.tasks}\r\n        }\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => {\r\n    return { type: 'REMOVE-TASK', todolistId, taskId } as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return { type: 'ADD-TASK', task } as const\r\n}\r\nexport const updateTaskAC = (taskId: string, updateModel: UpdateModelType, todolistId: string) => {\r\n    return { type: 'UPDATE_TASK', updateModel, todolistId, taskId } as const\r\n}\r\nexport const setTaskAC = (tasks:TaskType[], todolistId: string) => {\r\n    return { type: 'SET_TASKS', tasks, todolistId } as const\r\n} \r\n\r\nexport const fetchTasks = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.getTasksTodolist(todolistId).then(res=>{\r\n        let tasks = res.data.items.reverse()\r\n        dispatch(setTaskAC(tasks, todolistId))\r\n    })\r\n}\r\nexport const removeTaskTC = (taskId:string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTask( todolistId, taskId).then(res=>{\r\n        dispatch(removeTaskAC(taskId, todolistId))\r\n    })\r\n}\r\nexport const createTask = (title: string, todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTask(todolistId, title).then(res=>{\r\n        dispatch(addTaskAC(res.data.data.item))\r\n    })\r\n}\r\nexport const updateTask = (taskId: string, updateModel:UpdateModelType, todolistId: string) => {\r\n    return (dispatch: Dispatch, getState:()=>AppRootStateType) => {\r\n    const task = getState().tasks1[todolistId].find(t=>t.id===taskId)\r\n    if(task){\r\n    let model: UpdateTaskModelType = {\r\n        title: task.title,\r\n        description: task.description,\r\n        status: task.status,\r\n        priority: task.priority,\r\n        startDate: task.startDate,\r\n        deadline: task.deadline,\r\n        ...updateModel\r\n    }\r\n    todolistAPI.updateTask(todolistId, taskId, model).then(res=>{\r\n        dispatch(updateTaskAC(taskId, updateModel, todolistId))\r\n    })}\r\n}}","import React, { ChangeEvent, useCallback } from 'react';\r\nimport {  Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { TaskStatuses, TaskType } from './api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    id:string\r\n    task: TaskType\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n}\r\n \r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n  const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.id),[props.removeTask,props.task.id, props.id]);\r\n  const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.id);\r\n  },[props.changeTaskStatus, props.task.id, props.id])\r\n  const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n    props.changeTaskTitle(props.task.id, newTitle, props.id);\r\n  },[props.changeTaskTitle,props.task.id,props.id]);\r\n  return (\r\n    <div key={props.task.id} style={{ fontSize: \"19px\" }}>\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={props.task.status===TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan\r\n        onChange={onChangeTitleHandler}\r\n        title={props.task.title}\r\n        isDone={props.task.status===TaskStatuses.Completed}\r\n      />\r\n      <IconButton onClick={onRemoveHandler}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});","import { Button,  IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { TaskStatuses, TaskType } from './api/todolist-api';\r\nimport { EditableSpan } from './EditableSpan';\r\nimport { fetchTasks } from './state/tasks-reducer';\r\nimport { filtersValueType } from './state/todolists-reducer';\r\nimport { Task } from './Task';\r\n\r\nexport type TodoListPropsType = {\r\n    id:string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses,todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    filter: filtersValueType\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(()=>{\r\n    dispatch(fetchTasks(props.id))\r\n  },[])\r\n  console.log('TodoList');\r\n  let tasksForTodolist = props.tasks\r\n  if (props.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.New);\r\n  }\r\n  if (props.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.Completed);\r\n  }\r\n    const onClickAllHandler = useCallback(() => props.changeFilter('all',props.id), [props.id, props.changeFilter])\r\n    const onClickActiveHandler = useCallback(() => props.changeFilter('active',props.id), [props.id, props.changeFilter])\r\n    const onClicCompletedHandler = useCallback(() => props.changeFilter('completed',props.id), [props.id, props.changeFilter])\r\n    const onClickRemoveTodoList = useCallback(()=>props.removeTodolist(props.id), [props.id, props.removeTodolist])\r\n    const addItem = useCallback((title:string)=>props.addTasks(title,props.id),[props.addTasks, props.id])\r\n    const changeTodoListTitle=useCallback((newTitle:string)=>props.changeTodoListTitle(newTitle,props.id),[props.changeTodoListTitle,props.id])\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} onChange={changeTodoListTitle} />\r\n          <IconButton onClick={onClickRemoveTodoList}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} />\r\n        <div>\r\n          {tasksForTodolist.map((t) => {\r\n            return <Task changeTaskStatus={props.changeTaskStatus}\r\n                         changeTaskTitle={props.changeTaskTitle}\r\n                         removeTask={props.removeTask}\r\n                         task={t}\r\n                         id={props.id}\r\n                         key={t.id}/>\r\n            })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n})\r\nexport default TodoList;\r\n\r\n","import { todolistAPI } from './../api/todolist-api';\r\nimport { TodolistType } from '../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nexport type RemoveTodolistActionType = {\r\n    type: 'REMOVE-TODOLIST'\r\n    todolistId: string\r\n}\r\nexport type AddTodolistActionType = {\r\n    type: 'ADD-TODOLIST'\r\n    todolist: TodolistType\r\n}\r\nexport type ChangeTodolistTitleActionType = {\r\n    type: 'CHANGE-TODOLIST-TITLE'\r\n    todolistId:string\r\n    title: string\r\n}\r\nexport type ChangeTodolistFilterActionType = {\r\n    type: 'CHANGE-TODOLIST-FILTER'\r\n    todolistId:string\r\n    filter:filtersValueType\r\n}\r\nexport type SetTodolistsActionType = ReturnType<typeof SetTodolistAC>\r\nexport type ActionType = \r\nRemoveTodolistActionType\r\n|AddTodolistActionType\r\n|ChangeTodolistTitleActionType\r\n|ChangeTodolistFilterActionType\r\n|SetTodolistsActionType\r\n\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filtersValueType\r\n}\r\n\r\nlet initState:Array<TodolistDomainType> = []\r\n\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = initState, action: ActionType):Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl=>tl.id!==action.todolistId)\r\n        case 'ADD-TODOLIST':\r\n            return[{ ...action.todolist, filter:\"all\"},...state]\r\n        case 'CHANGE-TODOLIST-TITLE':{\r\n            const newState = state.map(tl=>{\r\n                if(tl.id === action.todolistId){\r\n                    return {...tl, title: action.title}\r\n                }\r\n                return tl\r\n            })\r\n            return newState\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER':{\r\n            const newState = state.map(tl=>{\r\n                if(tl.id === action.todolistId){\r\n                    return {...tl,filter:action.filter}\r\n                }\r\n                return tl\r\n            })            \r\n            return newState\r\n        }\r\n        case 'SET_TODOLISTS':{\r\n            return action.todolists.map(tl=>({...tl,filter:'all'}))      \r\n        }\r\n        default:\r\n            return state\r\n    }\r\n }\r\n export const RemoveTodolistAC = (todolistId: string): RemoveTodolistActionType => {\r\n    return { type: 'REMOVE-TODOLIST',  todolistId}\r\n }\r\n export const AddTodolistAC = (todolist: TodolistType): AddTodolistActionType => {\r\n    return { type:\"ADD-TODOLIST\", todolist}\r\n }\r\n export const ChangeTodolistTitleAC = (todolistId:string, title:string): ChangeTodolistTitleActionType => {\r\n    return { type: 'CHANGE-TODOLIST-TITLE', todolistId, title}\r\n }\r\n export const ChangeTodolistFilterAC = (todolistId: string, filter:filtersValueType): ChangeTodolistFilterActionType => {\r\n    return { type: 'CHANGE-TODOLIST-FILTER', todolistId, filter}\r\n }\r\nexport const SetTodolistAC = (todolists: TodolistType[]) => {\r\n    return { type: 'SET_TODOLISTS', todolists } as const\r\n}\r\n\r\n\r\nexport const fetchTodolists = () => (dispatch: Dispatch) => {\r\n    todolistAPI.getTodolists().then(res=>{\r\n        dispatch(SetTodolistAC(res.data))\r\n      })\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.deleteTodolist(todolistId).then(res=>{\r\n        dispatch(RemoveTodolistAC(todolistId))\r\n      })\r\n}\r\nexport const createTodolist = (title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.createTodolist(title).then(res=>{\r\n        dispatch(AddTodolistAC(res.data.data.item))\r\n      })\r\n}\r\nexport const updateTodolist = ( todolistId:string, title:string ) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolistTitle( todolistId, title ).then(res=>{\r\n        dispatch(ChangeTodolistTitleAC( todolistId, title ))\r\n      })\r\n}\r\n ","import React, { useCallback, useEffect } from 'react';\r\nimport './App.css';\r\nimport TodoList from './Todolist';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport { ChangeTodolistFilterAC, filtersValueType, fetchTodolists, removeTodolistTC, createTodolist, updateTodolist } from './state/todolists-reducer';\r\nimport { removeTaskTC, createTask, updateTask } from './state/tasks-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './state/store';\r\nimport { TaskStatuses, TaskType } from './api/todolist-api';\r\n\r\nexport type TasksStateType = {\r\n    [key:string]:Array<TaskType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n  const dispatch = useDispatch()\r\n  const {todoLists,tasks1} = useSelector<AppRootStateType,AppRootStateType>(state=>state)\r\n  useEffect(()=>{\r\n    dispatch(fetchTodolists())\r\n  },[])\r\n    \r\n    const addTasks = useCallback((title: string, todolistId: string) => {\r\n      dispatch(createTask(title,todolistId))\r\n        changeFilter(\"all\", todolistId)\r\n    },[dispatch])\r\n    const removeTask = useCallback((id: string, todolistId: string) => {\r\n      dispatch(removeTaskTC(id,todolistId))\r\n    },[dispatch])\r\n    const changeStatus = useCallback((id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTask(id, { status }, todolistId))\r\n    },[dispatch])\r\n    const changeFilter = useCallback((value: filtersValueType, todolistId: string) => {\r\n      dispatch(ChangeTodolistFilterAC(todolistId,value))\r\n    },[dispatch])\r\n    const removeTodolist = useCallback((todolistId: string) => {\r\n      dispatch(removeTodolistTC(todolistId))\r\n    },[dispatch])\r\n    const addTodoList = useCallback((title:string) => {\r\n      dispatch(createTodolist(title))\r\n    },[dispatch])\r\n    const changeTaskTitle = useCallback((id: string, newTitile:string, todolistdId:string) => {\r\n      dispatch(updateTask(id,{ title: newTitile },todolistdId))\r\n    },[dispatch])\r\n    const changeTodoListTitle = useCallback((newTitile:string, todolistdId:string) => {\r\n      dispatch(updateTodolist(todolistdId,newTitile))\r\n    },[dispatch])\r\n \r\n    return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">News</Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding:'20px'}}>\r\n            <AddItemForm addItem={addTodoList} />\r\n          </Grid>\r\n          <Grid container spacing={3}>\r\n            {todoLists.map((el) => {\r\n              let tasksForTodolist = tasks1[el.id];             \r\n\r\n              return (\r\n                <Grid item key={el.id}>\r\n                  <Paper elevation={8} style={{padding:'10px'}}>\r\n                    <TodoList\r\n                      id={el.id}\r\n                      title={el.title}\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTasks={addTasks}\r\n                      changeTaskStatus={changeStatus}\r\n                      filter={el.filter}\r\n                      removeTodolist={removeTodolist}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                  </Paper>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { tasksReducer } from './tasks-reducer';\r\nimport { todolistsReducer } from './todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks1: tasksReducer,\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport AppWithRedux from './AppWithRedux';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './state/store';\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <AppWithRedux />\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}