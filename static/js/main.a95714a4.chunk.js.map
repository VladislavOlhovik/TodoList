{"version":3,"sources":["api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/todolistList/todolist/task/Task.tsx","features/todolistList/todolist/Todolist.tsx","features/todolistList/todolists-reducer.ts","features/todolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","disabled","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","instance","Axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","todolistAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialazed","removeTaskAC","updateTaskAC","updateModel","setTaskAC","tasks","changeTaskEntityStatusAC","entityStatus","updateTask","getState","a","task","tasks1","find","t","description","priority","startDate","deadline","res","resultCode","EditableSpan","editMode","setEditMode","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","changeTaskTitle","key","style","Checkbox","Delete","TodoList","useDispatch","useEffect","todolist","items","reverse","tasksForTodolist","filter","r","onClickAllHandler","changeFilter","onClickActiveHandler","onClicCompletedHandler","onClickRemoveTodoList","removeTodolist","addTasks","changeTodoListTitle","map","Button","size","margin","RemoveTodolistAC","ChangeTodolistTitleAC","changeTodolistEntityStatusAC","TodolistList","useSelector","state","todoLists","auth","todolists","item","createTask","removeTaskTC","changeStatus","ChangeTodolistFilterAC","removeTodolistTC","addTodoList","createTodolist","newTitile","todolistdId","Grid","container","padding","spacing","el","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","getFieldProps","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","height","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","todoListId","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.a95714a4.chunk.js","sourcesContent":["import  Axios  from 'axios';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"9209cc73-1dd6-4bef-bbf6-e01b3e14b107\",\r\n    },\r\n})\r\n\r\n// API\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title:string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title:title})\r\n    },\r\n    deleteTodolist(id:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id:string,title:string){\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title:title})\r\n    },\r\n    getTasksTodolist(todolistId:string){\r\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType ){\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgenty = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\ntype GetResponseTaskType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string |  null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type UpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        if(error){\r\n            setError(null)\r\n        }\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n      <div>\r\n        <TextField\r\n          disabled={props.disabled}\r\n          variant=\"outlined\"\r\n          value={newTasktitle}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          label=\"Title\"\r\n          helperText={error}\r\n          error={!!error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={buttonAddItem} disabled={props.disabled}>\r\n          <LibraryAdd fontSize=\"large\" />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n})","import { Dispatch } from 'redux';\r\nimport  { ResponseType } from '../api/todolist-api'\r\nimport { setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../app/app-reducer';\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error:{message:string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\nimport { authAPI, LoginParamsType } from './../../api/todolist-api';\r\nimport { Dispatch } from 'redux'\r\nimport { SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'login/SET-IS-LOGGED-IN':\r\n           return {...state, isLoggedIn: action.value}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = SetIsLoggedInType\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\ntype DispatchType = Dispatch<SetIsLoggedInType | SetAppStatusType | SetAppErrorType>\r\ntype InitialStateType = typeof initialState\r\n\r\n","import { setIsLoggedInAC, SetIsLoggedInType } from './../features/login/auth-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { authAPI } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialazed: false,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-INITIALAZED':\r\n            return { ...state, isInitialazed: action.isInitialazed }\r\n       default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status:RequestStatusType) => ({type:'APP/SET-STATUS',status} as const)\r\nexport const setAppErrorAC = (error: string|null) => ({type:'APP/SET-ERROR',error} as const)\r\nexport const setInitialazedAC = (isInitialazed: boolean) => ({type:'APP/SET-INITIALAZED', isInitialazed} as const)\r\n\r\n// thunks\r\nexport const initialazedTC = () => async (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.me()\r\n        dispatch(setInitialazedAC(true))\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setIsLoggedInAC(true))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n//types\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetInitialazedType = ReturnType<typeof setInitialazedAC>\r\ntype ActionsType = \r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | SetInitialazedType\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n       status: RequestStatusType\r\n       error: string|null\r\n       isInitialazed: boolean\r\n    }\r\ntype DispatchType = Dispatch<SetInitialazedType | SetAppStatusType | SetAppErrorType | SetIsLoggedInType>\r\n","import { AppRootStateType } from '../../app/store';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskType, todolistAPI, UpdateTaskModelType, UpdateModelType } from '../../api/todolist-api';\r\nimport { RemoveTodolistActionType, SetTodolistsActionType, AddTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../../app/App';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [...state[action.task.todoListId], {...action.task, entityStatus: 'idle'}] }\r\n        case 'UPDATE_TASK': \r\n            return {\r\n                ...state, \r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(el => el.id === action.taskId ? { ...el, ...action.updateModel } : el)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return { ...state, [action.todolistId]: state[action.todolistId]\r\n                .map(t=>t.id===action.taskId?{...t, entityStatus: action.entityStatus}:t)}\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = { ...state }\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': \r\n            return {...state,[action.todolistId]:action.tasks.map(t=>({...t, entityStatus: 'idle'}))}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => \r\n    ({ type: 'REMOVE-TASK', todolistId, taskId } as const)\r\nexport const addTaskAC = (task: TaskType) => \r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, updateModel: UpdateModelType, todolistId: string) => \r\n    ({ type: 'UPDATE_TASK', updateModel, todolistId, taskId } as const)\r\nexport const setTaskAC = (tasks:TaskType[], todolistId: string) => \r\n    ({ type: 'SET_TASKS', tasks, todolistId } as const) \r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, taskId:string, todolistId: string) => \r\n    ({type:'CHANGE-TASK-ENTITY-STATUS', entityStatus, taskId, todolistId} as const)\r\n// thunk\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTasksTodolist(todolistId)\r\n        let tasks = res.data.items.reverse()\r\n        dispatch(setTaskAC(tasks, todolistId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTask(todolistId, taskId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (title: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (taskId: string, updateModel: UpdateModelType, todolistId: string) =>\r\n    async (dispatch: DispatchTaskType, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n        const task = getState().tasks1[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            let model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...updateModel\r\n            }\r\n            try {\r\n                let res = await todolistAPI.updateTask(todolistId, taskId, model)\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, updateModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC('succeeded', taskId, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n                }\r\n            } catch (error) {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n            }\r\n        }\r\n    }\r\n// types\r\ntype ActionType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTaskAC>\r\n| ReturnType<typeof changeTaskEntityStatusAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\ntype DispatchTaskType = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\nexport type EditableSpanPropsType = {\r\n  disabled: boolean\r\n  isDone?: boolean;\r\n  title: string;\r\n  onChange: (newTitle: string) => void;\r\n};\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  console.log(\"EditableSpan\");\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [title, setTitle] = useState(\"\");\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const activateEditMode = () => {\r\n    if(props.disabled){\r\n      setEditMode(true);\r\n      setTitle(props.title);\r\n    }\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      onBlur={activateViewMode}\r\n      autoFocus\r\n    />\r\n  ) : (\r\n    <span\r\n      onDoubleClick={activateEditMode}\r\n      title={\"to change it use a double click\"}\r\n      className={props.isDone ? \"is-done\" : \"\"}\r\n    >\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport {  Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\r\nimport { TaskStatuses, TaskDomainType } from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    id:string\r\n    task: TaskDomainType\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n}\r\n \r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n  const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.id),[props.removeTask,props.task.id, props.id]);\r\n  const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.id);\r\n  },[props.changeTaskStatus, props.task.id, props.id])\r\n  const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n    props.changeTaskTitle(props.task.id, newTitle, props.id);\r\n  },[props.changeTaskTitle,props.task.id,props.id]);\r\n  return (\r\n    <div key={props.task.id} style={{ fontSize: \"19px\" }}>\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={props.task.status===TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan\r\n        disabled={props.task.entityStatus!=='loading'}\r\n        onChange={onChangeTitleHandler}\r\n        title={props.task.title}\r\n        isDone={props.task.status===TaskStatuses.Completed}\r\n      />\r\n      <IconButton onClick={onRemoveHandler} disabled={props.task.entityStatus==='loading'}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});","import { Button,  IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { TaskStatuses, TaskDomainType } from '../../../api/todolist-api';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport { fetchTasks } from '../tasks-reducer';\r\nimport { filtersValueType, TodolistDomainType } from '../todolists-reducer';\r\nimport { Task } from './task/Task';\r\n\r\nexport type TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses,todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(()=>{\r\n    dispatch(fetchTasks(props.todolist.id))\r\n  },[])\r\n  console.log('TodoList');\r\n  let tasksForTodolist = props.tasks\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.Completed);\r\n  }\r\n    const onClickAllHandler = useCallback(() => props.changeFilter('all',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickActiveHandler = useCallback(() => props.changeFilter('active',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClicCompletedHandler = useCallback(() => props.changeFilter('completed',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickRemoveTodoList = useCallback(()=>props.removeTodolist(props.todolist.id), [props.todolist.id, props.removeTodolist])\r\n    const addItem = useCallback((title:string)=>props.addTasks(title,props.todolist.id),[props.addTasks, props.todolist.id])\r\n    const changeTodoListTitle=useCallback((newTitle:string)=>props.changeTodoListTitle(newTitle,props.todolist.id),[props.changeTodoListTitle,props.todolist.id])\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} disabled={props.todolist.entityStatus!=='loading'}/>\r\n          <IconButton onClick={onClickRemoveTodoList} disabled={props.todolist.entityStatus==='loading'}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} disabled={props.todolist.entityStatus==='loading'}/>\r\n        <div>\r\n          {tasksForTodolist.map((t) => {\r\n            return <Task changeTaskStatus={props.changeTaskStatus}\r\n                         changeTaskTitle={props.changeTaskTitle}\r\n                         removeTask={props.removeTask}\r\n                         task={t}\r\n                         id={props.todolist.id}\r\n                         key={t.id}/>\r\n            })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n})\r\nexport default TodoList;\r\n\r\n","import { todolistAPI } from '../../api/todolist-api';\r\nimport { TodolistType } from '../../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = [], action: ActionType):Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl=>tl.id!==action.todolistId)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl=>tl.id===action.todolistId?{...tl, entityStatus:action.entityStatus}:tl)\r\n        case 'ADD-TODOLIST':\r\n            return[{ ...action.todolist, filter:\"all\", entityStatus: 'idle'},...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, title: action.title}:tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, filter:action.filter}:tl)\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl=>({...tl, filter:'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n }\r\n//action\r\nexport const RemoveTodolistAC = (todolistId: string) => \r\n    ({ type: 'REMOVE-TODOLIST', todolistId } as const)\r\nexport const AddTodolistAC = (todolist: TodolistType) => \r\n    ({ type: \"ADD-TODOLIST\", todolist } as const)\r\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string) => \r\n    ({ type: 'CHANGE-TODOLIST-TITLE', todolistId, title } as const )\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: filtersValueType) => \r\n    ({ type: 'CHANGE-TODOLIST-FILTER', todolistId, filter } as const)\r\nexport const SetTodolistAC = (todolists: TodolistType[]) => \r\n    ({ type: 'SET_TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, todolistId:string) => \r\n    ({type:'CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, todolistId} as const)\r\n//thunks\r\nexport const fetchTodolists = () => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTodolists()\r\n        dispatch(SetTodolistAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTodolist = (title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(AddTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTodolist = (todolistId: string, title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.updateTodolistTitle(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(ChangeTodolistTitleAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof SetTodolistAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionType = \r\n| RemoveTodolistActionType\r\n| AddTodolistActionType\r\n| SetTodolistsActionType\r\n| ReturnType<typeof ChangeTodolistTitleAC>\r\n| ReturnType<typeof ChangeTodolistFilterAC>\r\n| ChangeTodolistEntityStatusType\r\n\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filtersValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype DispatchTodolistType = ActionType|SetAppStatusType|SetAppErrorType","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { TaskStatuses } from \"../../api/todolist-api\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { createTask, removeTaskTC, updateTask } from \"./tasks-reducer\";\r\nimport TodoList from \"./todolist/Todolist\";\r\nimport {\r\n  ChangeTodolistFilterAC,\r\n  createTodolist,\r\n  fetchTodolists,\r\n  filtersValueType,\r\n  removeTodolistTC,\r\n  updateTodolist,\r\n} from \"./todolists-reducer\";\r\n\r\nexport const TodolistList: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { todoLists, tasks1 } = useSelector<AppRootStateType, AppRootStateType>(\r\n    (state) => state\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n  useEffect(() => {\r\n    if(!isLoggedIn){\r\n      return\r\n    }\r\n    dispatch(fetchTodolists());\r\n  }, []);\r\n\r\n  const addTasks = useCallback(\r\n    (title: string, todolistId: string) => {\r\n      dispatch(createTask(title, todolistId));\r\n      changeFilter(\"all\", todolistId);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTask = useCallback(\r\n    (id: string, todolistId: string) => {\r\n      dispatch(removeTaskTC(id, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeStatus = useCallback(\r\n    (id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTask(id, { status }, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeFilter = useCallback(\r\n    (value: filtersValueType, todolistId: string) => {\r\n      dispatch(ChangeTodolistFilterAC(todolistId, value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTodolist = useCallback(\r\n    (todolistId: string) => {\r\n      dispatch(removeTodolistTC(todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      dispatch(createTodolist(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTask(id, { title: newTitile }, todolistdId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTodolist(todolistdId, newTitile));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodoList} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((el) => {\r\n          let tasksForTodolist = tasks1[el.id];\r\n          return (\r\n            <Grid item key={el.id}>\r\n              <Paper elevation={8} style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                  todolist={el}\r\n                  tasks={tasksForTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTasks={addTasks}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType,string|null>(state=>state.app.error) \r\n  const dispatch = useDispatch()  \r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error?error:'Some error'}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    type FormikErrorType = {\r\n        email?: string\r\n        password?: string\r\n        rememberMe?: boolean\r\n     }\r\n     \r\n    const formik = useFormik({\r\n      initialValues: {\r\n        email: \"\",\r\n        password: \"\",\r\n        rememberMe: false,\r\n      },\r\n      validate: (values) => {\r\n        const errors: FormikErrorType = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        if(!values.password){\r\n            errors.password = \"Required\";\r\n        }\r\n        return errors;\r\n      },\r\n      onSubmit: (values) => {\r\n        dispatch(loginTC(values))\r\n      },\r\n    });\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/'}/>\r\n    }\r\n   return (\r\n     <Grid container justify=\"center\">\r\n       <Grid item xs={4}>\r\n         <FormControl>\r\n           <FormLabel>\r\n             <p>\r\n               To log in get registered\r\n               <a\r\n                 href={\"https://social-network.samuraijs.com/\"}\r\n                 target={\"blank\"}\r\n               >\r\n                 here\r\n               </a>\r\n             </p>\r\n             <p>or use common test account credentials:</p>\r\n             <p>Email: alkhovikvlad@gmail.com</p>\r\n             <p>Password: itkamasutra</p>\r\n           </FormLabel>\r\n           <form onSubmit={formik.handleSubmit}>\r\n             <FormGroup>\r\n               <TextField\r\n                 label=\"Email\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"email\")}\r\n               />\r\n               {formik.errors.email?<div style={{color:'red'}}>{formik.errors.email}</div>:null}\r\n               <TextField\r\n                 type=\"password\"\r\n                 label=\"Password\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"password\")}\r\n               />\r\n               {formik.errors.password?<div style={{color:'red'}}>{formik.errors.password}</div>:null}\r\n               <FormControlLabel\r\n                 label={\"Remember me\"}\r\n                 control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n               />\r\n               <Button disabled={!!formik.errors.email||!!formik.errors.password} type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                 Login\r\n               </Button>\r\n             </FormGroup>\r\n           </form>\r\n         </FormControl>\r\n       </Grid>\r\n     </Grid>\r\n   );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {  TaskDomainType } from '../api/todolist-api';\r\nimport { TodolistList } from '../features/todolistList/TodolistList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { initialazedTC, RequestStatusType } from './app-reducer';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from '../features/login/login';\r\nimport { logoutTC } from '../features/login/auth-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key:string]:Array<TaskDomainType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=>state.app.status)    \r\n    const isInitialazed = useSelector<AppRootStateType, boolean>(state=>state.app.isInitialazed)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n      dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(()=>{\r\n      dispatch(initialazedTC())\r\n    },[])\r\n    if (!isInitialazed) {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"30%\",\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">News</Typography>\r\n            {isLoggedIn&&<Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n          </Toolbar>\r\n          <div style={{height:'4px'}}>\r\n            {status==='loading'&&<LinearProgress/>}\r\n          </div>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Switch>\r\n            <Route exact path = {'/'} render={() => <TodolistList/>} />\r\n            <Route path = {'/login'} render={() => <Login/>} />\r\n            <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n            <Redirect from={ '*' } to={ '/404' }/>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { authReducer } from './../features/login/auth-reducer';\r\nimport { appReducer } from './app-reducer';\r\nimport { tasksReducer } from '../features/todolistList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/todolistList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks1: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppWithRedux from \"./app/App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./app/store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <AppWithRedux />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}