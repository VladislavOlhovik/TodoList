{"version":3,"sources":["AddItemForm.tsx","EditableSpan.tsx","Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","EditableSpan","editMode","setEditMode","title","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","TodoList","newTitle","changeTodoListTitle","id","removeTodolist","Delete","addTasks","tasks","map","t","key","style","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","size","filter","changeFilter","margin","App","todoListId1","v1","todoListId2","todoListId3","todoLists","setTodoLists","tasks1","setTasks1","todolistId","todoListTasks","newTask","changeStatus","statusTask","find","el","todoList","newTitile","todolistdId","task","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","newTodoList","spacing","tasksForTodolist","r","item","Paper","elevation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.165373f7.chunk.js","sourcesContent":["import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\ntype AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n}\r\n\r\nexport function AddItemForm (props:AddItemFormPropsType){\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        setError(null)\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return <div>\r\n    <TextField\r\n        variant='outlined'\r\n        value={newTasktitle}\r\n        onChange={onChangeHandler}\r\n        onKeyPress={onKeyPressHandler}\r\n        label='Title'\r\n        helperText={error}\r\n        error={!!error} />\r\n    <IconButton color='primary' onClick={buttonAddItem}>\r\n        <LibraryAdd fontSize='large'/>\r\n    </IconButton>\r\n</div>\r\n}","import { TextField } from '@material-ui/core';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType={\r\n    isDone?:boolean\r\n    title:string\r\n    onChange:(newTitle:string)=>void\r\n}\r\nexport function EditableSpan(props:EditableSpanPropsType){\r\n    let [editMode,setEditMode]=useState<boolean>(false)\r\n    let [title,setTitle]=useState('')\r\n    const activateViewMode =()=>{\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const activateEditMode=()=>{\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const changeTitle=(e:ChangeEvent<HTMLInputElement>)=>{\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    return editMode\r\n    ?<TextField variant='outlined' value={title} onChange={changeTitle} onBlur={activateViewMode} autoFocus/>\r\n    : <span \r\n        onDoubleClick={activateEditMode} \r\n        title={'to change it use a double click'}\r\n        className={props.isDone ? \"is-done\" : \"\"}\r\n        >{props.title}</span>\r\n}","import { Button, Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { ChangeEvent } from 'react';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { EditableSpan } from './EditableSpan';\r\n\r\nexport type TodoListPropsType = {\r\n    id:string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    changeTaskStatus: (id: string, isDone: boolean,todolistdId:string) => void\r\n    filter: filtersValueType\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: filtersValueType\r\n}\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nfunction TodoList(props: TodoListPropsType) {\r\n    const onClickAllHandler = () => props.changeFilter('all',props.id)\r\n    const onClickActiveHandler = () => props.changeFilter('active',props.id)\r\n    const onClicCompletedHandler = () => props.changeFilter('completed',props.id)\r\n    const onClickRemoveTodoList=()=>props.removeTodolist(props.id)\r\n    const addItem=(title:string)=>props.addTasks(title,props.id)\r\n    const changeTodoListTitle=(newTitle:string)=>props.changeTodoListTitle(newTitle,props.id)\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.title} onChange={changeTodoListTitle} />\r\n          <IconButton onClick={onClickRemoveTodoList}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} />\r\n        <div>\r\n          {props.tasks.map((t) => {\r\n            const onRemoveHandler = () => props.removeTask(t.id, props.id);\r\n            const onChangeStatusHandler = (\r\n              e: ChangeEvent<HTMLInputElement>\r\n            ) => {\r\n              props.changeTaskStatus(t.id, e.currentTarget.checked, props.id);\r\n            };\r\n            const onChangeTitleHandler = (newTitle: string) => {\r\n              props.changeTaskTitle(t.id, newTitle, props.id);\r\n            };\r\n            return (\r\n              <div key={t.id} style={{fontSize: '19px'}}>\r\n                <Checkbox\r\n                  color='primary'\r\n                  checked={t.isDone}\r\n                  onChange={onChangeStatusHandler}\r\n                />\r\n                <EditableSpan onChange={onChangeTitleHandler} title={t.title} isDone={t.isDone}/>\r\n                <IconButton onClick={onRemoveHandler}>\r\n                  <Delete/>\r\n                </IconButton>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\nexport default TodoList;\r\n\r\n","import React, { useState } from 'react';\r\nimport './App.css';\r\nimport TodoList, { filtersValueType, TodoListType, TaskType } from './Todolist';\r\nimport { v1 } from 'uuid';\r\nimport { AddItemForm } from './AddItemForm';\r\nimport { AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\n\r\ntype TaskStateType = {\r\n    [key:string]:Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n    let todoListId1 = v1()\r\n    let todoListId2 = v1()\r\n    let todoListId3 = v1()\r\n\r\n    let [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n        { id: todoListId1, title: 'What to learn', filter: 'all' },\r\n        { id: todoListId2, title: 'What to buy', filter: 'all' },\r\n        { id: todoListId3, title: 'What to buy', filter: 'all' }\r\n    ])\r\n\r\n    let [tasks1, setTasks1] = useState<TaskStateType>({\r\n        [todoListId1]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'ReackJS', isDone: false },\r\n            { id: v1(), title: 'rest api', isDone: false },\r\n            { id: v1(), title: 'graphQL', isDone: false }\r\n        ],\r\n        [todoListId2]: [\r\n            { id: v1(), title: 'HTML&CSS', isDone: true },\r\n            { id: v1(), title: 'JS', isDone: true },\r\n            { id: v1(), title: 'ReackJS', isDone: false },\r\n            { id: v1(), title: 'rest api', isDone: false },\r\n            { id: v1(), title: 'graphQL', isDone: false }\r\n        ],\r\n        [todoListId3]: [\r\n            { id: v1(), title: 'Book', isDone: true },\r\n            { id: v1(), title: 'Milk', isDone: true }\r\n        ]\r\n    })\r\n\r\n    function addTasks(title: string, todolistId: string) {\r\n        let todoListTasks = tasks1[todolistId]\r\n        const newTask = { id: v1(), title: title, isDone: false }\r\n        tasks1[todolistId] = [newTask, ...todoListTasks]\r\n        setTasks1({ ...tasks1 })\r\n    }\r\n    function removeTask(id: string, todolistId: string) {\r\n        let todoListTasks = tasks1[todolistId]\r\n        tasks1[todolistId] = todoListTasks.filter(t => t.id !== id)\r\n        setTasks1({ ...tasks1 });\r\n    }\r\n    function changeStatus(id: string, isDone: boolean, todolistId: string) {\r\n        let todoListTasks = tasks1[todolistId]\r\n        let statusTask = todoListTasks.find(el => el.id === id)\r\n        if (statusTask) {\r\n            statusTask.isDone = isDone\r\n            setTasks1({ ...tasks1 })\r\n        }\r\n    }\r\n    function changeFilter(value: filtersValueType, todolistId: string) {\r\n        let todoList = todoLists.find((el) => el.id == todolistId)\r\n        if (todoList) {\r\n            todoList.filter = value\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n    function removeTodolist(todolistId: string) {\r\n        setTodoLists(todoLists.filter(el => el.id !== todolistId))\r\n        delete tasks1[todolistId]\r\n        setTasks1({...tasks1})\r\n    }\r\n    function addTodoList (title:string){\r\n        let newTodoList:TodoListType={\r\n            id:v1(),\r\n            title:title,\r\n            filter:'all'\r\n        }\r\n        setTodoLists([newTodoList,...todoLists])\r\n        setTasks1({...tasks1,[newTodoList.id]:[]})\r\n    }\r\n    function changeTaskTitle(id: string, newTitile:string, todolistdId:string){\r\n        let todoList = tasks1[todolistdId]\r\n        let task = todoList.find(el=>el.id===id)\r\n        if(task){\r\n            task.title=newTitile\r\n            setTasks1({...tasks1})\r\n        }\r\n    }\r\n    function changeTodoListTitle(newTitile:string, todolistdId:string){\r\n        let todoList=todoLists.find(el=>el.id===todolistdId)\r\n        if(todoList){\r\n            todoList.title=newTitile\r\n            setTodoLists([...todoLists])\r\n        }\r\n    }\r\n \r\n    return (\r\n      <div className=\"App\">\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">News</Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Grid container style={{padding:'20px'}}>\r\n            <AddItemForm addItem={addTodoList} />\r\n          </Grid>\r\n          <Grid container spacing={3}>\r\n            {todoLists.map((el) => {\r\n              let tasksForTodolist = tasks1[el.id];\r\n\r\n              if (el.filter === \"active\") {\r\n                tasksForTodolist = tasksForTodolist.filter((r) => !r.isDone);\r\n              }\r\n              if (el.filter === \"completed\") {\r\n                tasksForTodolist = tasksForTodolist.filter((r) => r.isDone);\r\n              }\r\n\r\n              return (\r\n                <Grid item key={el.id}>\r\n                  <Paper elevation={8} style={{padding:'10px'}}>\r\n                    <TodoList\r\n                      id={el.id}\r\n                      title={el.title}\r\n                      tasks={tasksForTodolist}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      addTasks={addTasks}\r\n                      changeTaskStatus={changeStatus}\r\n                      filter={el.filter}\r\n                      removeTodolist={removeTodolist}\r\n                      changeTaskTitle={changeTaskTitle}\r\n                      changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                  </Paper>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}