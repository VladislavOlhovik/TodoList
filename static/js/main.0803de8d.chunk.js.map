{"version":3,"sources":["api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","app/app-reducer.ts","utils/error-utils.ts","features/todolistList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/todolistList/todolist/task/Task.tsx","features/todolistList/todolist/Todolist.tsx","features/todolistList/todolists-reducer.ts","features/todolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","disabled","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","instance","Axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","setAppStatusAC","type","setAppErrorAC","handleServerAppError","data","dispatch","messages","length","handleServerNetworkError","message","removeTaskAC","updateTaskAC","updateModel","setTaskAC","tasks","changeTaskEntityStatusAC","entityStatus","updateTask","getState","a","task","tasks1","find","t","description","priority","startDate","deadline","res","resultCode","EditableSpan","editMode","setEditMode","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","changeTaskTitle","key","style","Checkbox","Delete","TodoList","useDispatch","useEffect","todolist","items","reverse","tasksForTodolist","filter","r","onClickAllHandler","changeFilter","onClickActiveHandler","onClicCompletedHandler","onClickRemoveTodoList","removeTodolist","addTasks","changeTodoListTitle","map","Button","size","margin","RemoveTodolistAC","ChangeTodolistTitleAC","changeTodolistEntityStatusAC","TodolistList","useSelector","state","todoLists","todolists","item","createTask","removeTaskTC","changeStatus","ChangeTodolistFilterAC","removeTodolistTC","addTodoList","createTodolist","newTitile","todolistdId","Grid","container","padding","spacing","el","Paper","elevation","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","height","LinearProgress","Container","fixed","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","todoListId","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0803de8d.chunk.js","sourcesContent":["import  Axios  from 'axios';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"9209cc73-1dd6-4bef-bbf6-e01b3e14b107\",\r\n    },\r\n})\r\n\r\n// API\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title:string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title:title})\r\n    },\r\n    deleteTodolist(id:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id:string,title:string){\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title:title})\r\n    },\r\n    getTasksTodolist(todolistId:string){\r\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType ){\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgenty = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\ntype GetResponseTaskType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string |  null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type UpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}","import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        if(error){\r\n            setError(null)\r\n        }\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n      <div>\r\n        <TextField\r\n          disabled={props.disabled}\r\n          variant=\"outlined\"\r\n          value={newTasktitle}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          label=\"Title\"\r\n          helperText={error}\r\n          error={!!error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={buttonAddItem} disabled={props.disabled}>\r\n          <LibraryAdd fontSize=\"large\" />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n})","export type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n   status: RequestStatusType\r\n   error: string|null\r\n}\r\n\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n       default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const setAppStatusAC = (status:RequestStatusType) => ({type:'APP/SET-STATUS',status} as const)\r\nexport const setAppErrorAC = (error: string|null) => ({type:'APP/SET-ERROR',error} as const)\r\n\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\ntype ActionsType = \r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n","import { Dispatch } from 'redux';\r\nimport  { ResponseType } from '../api/todolist-api'\r\nimport { setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../app/app-reducer';\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error:{message:string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import { AppRootStateType } from '../../app/store';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskType, todolistAPI, UpdateTaskModelType, UpdateModelType } from '../../api/todolist-api';\r\nimport { RemoveTodolistActionType, SetTodolistsActionType, AddTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../../app/App';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: ActionType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [...state[action.task.todoListId], {...action.task, entityStatus: 'idle'}] }\r\n        case 'UPDATE_TASK': \r\n            return {\r\n                ...state, \r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(el => el.id === action.taskId ? { ...el, ...action.updateModel } : el)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return { ...state, [action.todolistId]: state[action.todolistId]\r\n                .map(t=>t.id===action.taskId?{...t, entityStatus: action.entityStatus}:t)}\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = { ...state }\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': \r\n            return {...state,[action.todolistId]:action.tasks.map(t=>({...t, entityStatus: 'idle'}))}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => \r\n    ({ type: 'REMOVE-TASK', todolistId, taskId } as const)\r\nexport const addTaskAC = (task: TaskType) => \r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, updateModel: UpdateModelType, todolistId: string) => \r\n    ({ type: 'UPDATE_TASK', updateModel, todolistId, taskId } as const)\r\nexport const setTaskAC = (tasks:TaskType[], todolistId: string) => \r\n    ({ type: 'SET_TASKS', tasks, todolistId } as const) \r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, taskId:string, todolistId: string) => \r\n    ({type:'CHANGE-TASK-ENTITY-STATUS', entityStatus, taskId, todolistId} as const)\r\n// thunk\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTasksTodolist(todolistId)\r\n        let tasks = res.data.items.reverse()\r\n        dispatch(setTaskAC(tasks, todolistId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTask(todolistId, taskId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (title: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (taskId: string, updateModel: UpdateModelType, todolistId: string) =>\r\n    async (dispatch: DispatchTaskType, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n        const task = getState().tasks1[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            let model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...updateModel\r\n            }\r\n            try {\r\n                let res = await todolistAPI.updateTask(todolistId, taskId, model)\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, updateModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC('succeeded', taskId, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n                }\r\n            } catch (error) {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n            }\r\n        }\r\n    }\r\n// types\r\ntype ActionType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTaskAC>\r\n| ReturnType<typeof changeTaskEntityStatusAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\ntype DispatchTaskType = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\nexport type EditableSpanPropsType = {\r\n  disabled: boolean\r\n  isDone?: boolean;\r\n  title: string;\r\n  onChange: (newTitle: string) => void;\r\n};\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  console.log(\"EditableSpan\");\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [title, setTitle] = useState(\"\");\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const activateEditMode = () => {\r\n    if(props.disabled){\r\n      setEditMode(true);\r\n      setTitle(props.title);\r\n    }\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      onBlur={activateViewMode}\r\n      autoFocus\r\n    />\r\n  ) : (\r\n    <span\r\n      onDoubleClick={activateEditMode}\r\n      title={\"to change it use a double click\"}\r\n      className={props.isDone ? \"is-done\" : \"\"}\r\n    >\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport {  Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\r\nimport { TaskStatuses, TaskDomainType } from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    id:string\r\n    task: TaskDomainType\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n}\r\n \r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n  const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.id),[props.removeTask,props.task.id, props.id]);\r\n  const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.id);\r\n  },[props.changeTaskStatus, props.task.id, props.id])\r\n  const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n    props.changeTaskTitle(props.task.id, newTitle, props.id);\r\n  },[props.changeTaskTitle,props.task.id,props.id]);\r\n  return (\r\n    <div key={props.task.id} style={{ fontSize: \"19px\" }}>\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={props.task.status===TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan\r\n        disabled={props.task.entityStatus!=='loading'}\r\n        onChange={onChangeTitleHandler}\r\n        title={props.task.title}\r\n        isDone={props.task.status===TaskStatuses.Completed}\r\n      />\r\n      <IconButton onClick={onRemoveHandler} disabled={props.task.entityStatus==='loading'}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});","import { Button,  IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { TaskStatuses, TaskDomainType } from '../../../api/todolist-api';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport { fetchTasks } from '../tasks-reducer';\r\nimport { filtersValueType, TodolistDomainType } from '../todolists-reducer';\r\nimport { Task } from './task/Task';\r\n\r\nexport type TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses,todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(()=>{\r\n    dispatch(fetchTasks(props.todolist.id))\r\n  },[])\r\n  console.log('TodoList');\r\n  let tasksForTodolist = props.tasks\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.Completed);\r\n  }\r\n    const onClickAllHandler = useCallback(() => props.changeFilter('all',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickActiveHandler = useCallback(() => props.changeFilter('active',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClicCompletedHandler = useCallback(() => props.changeFilter('completed',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickRemoveTodoList = useCallback(()=>props.removeTodolist(props.todolist.id), [props.todolist.id, props.removeTodolist])\r\n    const addItem = useCallback((title:string)=>props.addTasks(title,props.todolist.id),[props.addTasks, props.todolist.id])\r\n    const changeTodoListTitle=useCallback((newTitle:string)=>props.changeTodoListTitle(newTitle,props.todolist.id),[props.changeTodoListTitle,props.todolist.id])\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} disabled={props.todolist.entityStatus!=='loading'}/>\r\n          <IconButton onClick={onClickRemoveTodoList} disabled={props.todolist.entityStatus==='loading'}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} disabled={props.todolist.entityStatus==='loading'}/>\r\n        <div>\r\n          {tasksForTodolist.map((t) => {\r\n            return <Task changeTaskStatus={props.changeTaskStatus}\r\n                         changeTaskTitle={props.changeTaskTitle}\r\n                         removeTask={props.removeTask}\r\n                         task={t}\r\n                         id={props.todolist.id}\r\n                         key={t.id}/>\r\n            })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n})\r\nexport default TodoList;\r\n\r\n","import { todolistAPI } from '../../api/todolist-api';\r\nimport { TodolistType } from '../../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = [], action: ActionType):Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl=>tl.id!==action.todolistId)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl=>tl.id===action.todolistId?{...tl, entityStatus:action.entityStatus}:tl)\r\n        case 'ADD-TODOLIST':\r\n            return[{ ...action.todolist, filter:\"all\", entityStatus: 'idle'},...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, title: action.title}:tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, filter:action.filter}:tl)\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl=>({...tl, filter:'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n }\r\n//action\r\nexport const RemoveTodolistAC = (todolistId: string) => \r\n    ({ type: 'REMOVE-TODOLIST', todolistId } as const)\r\nexport const AddTodolistAC = (todolist: TodolistType) => \r\n    ({ type: \"ADD-TODOLIST\", todolist } as const)\r\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string) => \r\n    ({ type: 'CHANGE-TODOLIST-TITLE', todolistId, title } as const )\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: filtersValueType) => \r\n    ({ type: 'CHANGE-TODOLIST-FILTER', todolistId, filter } as const)\r\nexport const SetTodolistAC = (todolists: TodolistType[]) => \r\n    ({ type: 'SET_TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, todolistId:string) => \r\n    ({type:'CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, todolistId} as const)\r\n//thunks\r\nexport const fetchTodolists = () => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTodolists()\r\n        dispatch(SetTodolistAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTodolist = (title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(AddTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTodolist = (todolistId: string, title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.updateTodolistTitle(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(ChangeTodolistTitleAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof SetTodolistAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionType = \r\n| RemoveTodolistActionType\r\n| AddTodolistActionType\r\n| SetTodolistsActionType\r\n| ReturnType<typeof ChangeTodolistTitleAC>\r\n| ReturnType<typeof ChangeTodolistFilterAC>\r\n| ChangeTodolistEntityStatusType\r\n\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filtersValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype DispatchTodolistType = ActionType|SetAppStatusType|SetAppErrorType","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { TaskStatuses } from \"../../api/todolist-api\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { createTask, removeTaskTC, updateTask } from \"./tasks-reducer\";\r\nimport TodoList from \"./todolist/Todolist\";\r\nimport {\r\n  ChangeTodolistFilterAC,\r\n  createTodolist,\r\n  fetchTodolists,\r\n  filtersValueType,\r\n  removeTodolistTC,\r\n  updateTodolist,\r\n} from \"./todolists-reducer\";\r\n\r\nexport const TodolistList: React.FC = () => {\r\n  const dispatch = useDispatch();\r\n  const { todoLists, tasks1 } = useSelector<AppRootStateType, AppRootStateType>(\r\n    (state) => state\r\n  );\r\n  useEffect(() => {\r\n    dispatch(fetchTodolists());\r\n  }, []);\r\n\r\n  const addTasks = useCallback(\r\n    (title: string, todolistId: string) => {\r\n      dispatch(createTask(title, todolistId));\r\n      changeFilter(\"all\", todolistId);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTask = useCallback(\r\n    (id: string, todolistId: string) => {\r\n      dispatch(removeTaskTC(id, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeStatus = useCallback(\r\n    (id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTask(id, { status }, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeFilter = useCallback(\r\n    (value: filtersValueType, todolistId: string) => {\r\n      dispatch(ChangeTodolistFilterAC(todolistId, value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTodolist = useCallback(\r\n    (todolistId: string) => {\r\n      dispatch(removeTodolistTC(todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      dispatch(createTodolist(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTask(id, { title: newTitile }, todolistdId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTodolist(todolistdId, newTitile));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodoList} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((el) => {\r\n          let tasksForTodolist = tasks1[el.id];\r\n          return (\r\n            <Grid item key={el.id}>\r\n              <Paper elevation={8} style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                  todolist={el}\r\n                  tasks={tasksForTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTasks={addTasks}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType,string|null>(state=>state.app.error) \r\n  const dispatch = useDispatch()  \r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error?error:'Some error'}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {  TaskDomainType } from '../api/todolist-api';\r\nimport { TodolistList } from '../features/todolistList/TodolistList';\r\nimport { useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { RequestStatusType } from './app-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key:string]:Array<TaskDomainType>\r\n}\r\n\r\nfunction AppWithRedux() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=>state.app.status)\r\n    return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">News</Typography>\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Toolbar>\r\n          <div style={{height:'4px'}}>\r\n            {status==='loading'&&<LinearProgress/>}\r\n          </div>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <TodolistList/>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { appReducer } from './app-reducer';\r\nimport { tasksReducer } from '../features/todolistList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/todolistList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks1: tasksReducer,\r\n    app: appReducer,\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport AppWithRedux from './app/App';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { store } from './app/store';\r\n\r\nReactDOM.render(\r\n<Provider store={store}>\r\n    <AppWithRedux />\r\n</Provider>,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}