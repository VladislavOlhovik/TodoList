{"version":3,"sources":["api/todolist-api.ts","components/AddItemForm/AddItemForm.tsx","utils/error-utils.ts","features/login/auth-reducer.ts","app/app-reducer.ts","features/todolistList/tasks-reducer.ts","components/EditableSpan/EditableSpan.tsx","features/todolistList/todolist/task/Task.tsx","features/todolistList/todolist/Todolist.tsx","features/todolistList/todolists-reducer.ts","features/todolistList/TodolistList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/login/login.tsx","app/App.tsx","serviceWorker.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","newTasktitle","setnewTasktitle","error","setError","buttonAddItem","trim","addItem","TextField","disabled","variant","value","onChange","event","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","LibraryAdd","fontSize","instance","Axios","create","baseURL","withCredentials","headers","authAPI","get","data","post","delete","todolistAPI","title","id","put","todolistId","taskId","model","handleServerAppError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialazed","login","setInitialazedAC","setLoginNameAC","removeTaskAC","updateTaskAC","updateModel","setTaskAC","tasks","changeTaskEntityStatusAC","entityStatus","updateTask","getState","a","task","tasks1","find","t","description","priority","startDate","deadline","res","resultCode","EditableSpan","editMode","setEditMode","setTitle","e","onBlur","autoFocus","onDoubleClick","className","isDone","Task","onRemoveHandler","useCallback","removeTask","onChangeStatusHandler","changeTaskStatus","checked","Completed","New","onChangeTitleHandler","newTitle","changeTaskTitle","key","style","Checkbox","Delete","TodoList","useDispatch","useEffect","todolist","items","reverse","tasksForTodolist","filter","r","onClickAllHandler","changeFilter","onClickActiveHandler","onClicCompletedHandler","onClickRemoveTodoList","removeTodolist","addTasks","changeTodoListTitle","map","Button","size","margin","RemoveTodolistAC","ChangeTodolistTitleAC","changeTodolistEntityStatusAC","TodolistList","demo","useSelector","state","todoLists","auth","todolists","item","createTask","removeTaskTC","changeStatus","ChangeTodolistFilterAC","removeTodolistTC","addTodoList","createTodolist","newTitile","todolistdId","Grid","container","padding","spacing","el","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","justify","xs","FormControl","FormLabel","href","target","handleSubmit","FormGroup","getFieldProps","touched","FormControlLabel","control","AppWithRedux","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","height","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","tl","todoListId","stateCopy","forEach","copyState","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8d1e0553.chunk.js","sourcesContent":["import  Axios  from 'axios';\r\nimport { RequestStatusType } from '../app/app-reducer';\r\n\r\nconst instance = Axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        \"api-key\": \"9209cc73-1dd6-4bef-bbf6-e01b3e14b107\",\r\n    },\r\n})\r\n\r\n// API\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    },\r\n    login(data: LoginParamsType){\r\n        return instance.post<ResponseType<{userId: number}>>('auth/login', data)\r\n    },\r\n    logout(){\r\n        return instance.delete<ResponseType>('auth/login')\r\n    },\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists(){\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title:string){\r\n        return instance.post<ResponseType<{item: TodolistType}>>('todo-lists',{title:title})\r\n    },\r\n    deleteTodolist(id:string){\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolistTitle(id:string,title:string){\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title:title})\r\n    },\r\n    getTasksTodolist(todolistId:string){\r\n        return instance.get<GetResponseTaskType>(`/todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string){\r\n        return instance.post<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks`,{title:title})\r\n    },\r\n    updateTask(todolistId:string, taskId:string, model:UpdateTaskModelType ){\r\n        return instance.put<ResponseType<{item:TaskType}>>(`/todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    },\r\n    deleteTask(todolistId:string, taskId:string){\r\n        return instance.delete<ResponseType>(`/todo-lists/${todolistId}/tasks/${taskId}`)\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    addedDate: string\r\n    id: string\r\n    order: number\r\n    title: string\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgenty = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n} \r\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\r\ntype GetResponseTaskType = {\r\n    items:TaskType[]\r\n    totalCount:number\r\n    error:string |  null\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type UpdateModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: number\r\n    priority?: number\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}","import { IconButton, TextField } from '@material-ui/core';\r\nimport { LibraryAdd } from '@material-ui/icons';\r\nimport React, { useState, ChangeEvent, KeyboardEvent } from 'react';\r\n\r\nexport type AddItemFormPropsType={\r\n    addItem:(title:string)=>void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props:AddItemFormPropsType) => {\r\n    console.log('AddItemForm');\r\n    let [newTasktitle, setnewTasktitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n    const onChangeHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setnewTasktitle(event.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLInputElement>) => {\r\n        event.charCode === 13 && buttonAddItem()\r\n        if(error){\r\n            setError(null)\r\n        }\r\n    }\r\n    const buttonAddItem = () => {\r\n        if (newTasktitle.trim() !== '') {\r\n            props.addItem(newTasktitle)\r\n            setnewTasktitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    return (\r\n      <div>\r\n        <TextField\r\n          disabled={props.disabled}\r\n          variant=\"outlined\"\r\n          value={newTasktitle}\r\n          onChange={onChangeHandler}\r\n          onKeyPress={onKeyPressHandler}\r\n          label=\"Title\"\r\n          helperText={error}\r\n          error={!!error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={buttonAddItem} disabled={props.disabled}>\r\n          <LibraryAdd fontSize=\"large\" />\r\n        </IconButton>\r\n      </div>\r\n    );\r\n})","import { Dispatch } from 'redux';\r\nimport  { ResponseType } from '../api/todolist-api'\r\nimport { setAppErrorAC, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../app/app-reducer';\r\n\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    if(data.messages.length){\r\n        dispatch(setAppErrorAC(data.messages[0]))\r\n    } else {\r\n        dispatch(setAppErrorAC('Some ERROR'))\r\n    }\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleServerNetworkError = (error:{message:string}, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message))\r\n}\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorType | SetAppStatusType>","import { setLoginNameAC, SetLoginNameType, initialazedTC, SetInitialazedType, setInitialazedAC } from './../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from './../../utils/error-utils';\r\nimport { authAPI, LoginParamsType } from './../../api/todolist-api';\r\nimport { Dispatch } from 'redux'\r\nimport { SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer'\r\n\r\nconst initialState = {\r\n   isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n   switch (action.type) {\r\n       case 'login/SET-IS-LOGGED-IN':\r\n           return {...state, isLoggedIn: action.value}\r\n       default:\r\n           return state\r\n   }\r\n}\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) =>\r\n   ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => async (dispatch: DispatchType) => {\r\n        dispatch(setInitialazedAC(false))\r\n    try {\r\n        let res = await authAPI.login(data)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC(true))\r\n            let data = await authAPI.me()\r\n            dispatch(setLoginNameAC(data.data.data.login))\r\n            dispatch(setInitialazedAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const logoutTC = () => async (dispatch: DispatchType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setLoginNameAC('you are not logged in'))\r\n            dispatch(setIsLoggedInAC(false))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n// types\r\ntype ActionsType = SetIsLoggedInType\r\nexport type SetIsLoggedInType = ReturnType<typeof setIsLoggedInAC>\r\ntype DispatchType = Dispatch<\r\n| SetIsLoggedInType \r\n| SetAppStatusType \r\n| SetAppErrorType \r\n| SetInitialazedType \r\n| SetLoginNameType>\r\ntype InitialStateType = typeof initialState\r\n\r\n","import { setIsLoggedInAC, SetIsLoggedInType } from './../features/login/auth-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from './../utils/error-utils';\r\nimport { authAPI } from './../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialazed: false,\r\n    login: 'you are not logged in',\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return { ...state, status: action.status }\r\n        case 'APP/SET-ERROR':\r\n            return { ...state, error: action.error }\r\n        case 'APP/SET-INITIALAZED':\r\n            return { ...state, isInitialazed: action.isInitialazed }\r\n        case 'APP/SET-LOGINNAME':\r\n            return { ...state, login: action.login }\r\n       default:\r\n            return state\r\n    }\r\n}\r\n\r\n// actions\r\nexport const setAppStatusAC = (status:RequestStatusType) => ({type:'APP/SET-STATUS',status} as const)\r\nexport const setAppErrorAC = (error: string|null) => ({type:'APP/SET-ERROR',error} as const)\r\nexport const setInitialazedAC = (isInitialazed: boolean) => ({type:'APP/SET-INITIALAZED', isInitialazed} as const)\r\nexport const setLoginNameAC = ( login: string ) => ({type:'APP/SET-LOGINNAME',  login} as const)\r\n\r\n// thunks\r\nexport const initialazedTC = () => async (dispatch: DispatchType) => {\r\n    try {\r\n        let res = await authAPI.me()\r\n        dispatch(setInitialazedAC(true))\r\n        if(res.data.resultCode === 0){\r\n            dispatch(setLoginNameAC(res.data.data.login))\r\n            dispatch(setIsLoggedInAC(true))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n\r\n//types\r\nexport type SetAppStatusType = ReturnType<typeof setAppStatusAC>\r\nexport type SetAppErrorType = ReturnType<typeof setAppErrorAC>\r\nexport type SetInitialazedType = ReturnType<typeof setInitialazedAC>\r\nexport type SetLoginNameType = ReturnType<typeof setLoginNameAC>\r\ntype ActionsType = \r\n    | SetAppStatusType\r\n    | SetAppErrorType\r\n    | SetInitialazedType\r\n    | SetLoginNameType\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\ntype InitialStateType = {\r\n       status: RequestStatusType\r\n       error: string|null\r\n       isInitialazed: boolean\r\n       login: string\r\n    }\r\ntype DispatchType = Dispatch<SetInitialazedType | SetAppStatusType | SetAppErrorType | SetIsLoggedInType | SetLoginNameType>\r\n","import { AppRootStateType } from '../../app/store';\r\nimport { Dispatch } from 'redux';\r\nimport { TaskType, todolistAPI, UpdateTaskModelType, UpdateModelType } from '../../api/todolist-api';\r\nimport { RemoveTodolistActionType, SetTodolistsActionType, AddTodolistActionType } from './todolists-reducer';\r\nimport { TasksStateType } from '../../app/App';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const tasksReducer = (state: TasksStateType = {}, action: ActionType): TasksStateType => {\r\n    debugger\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK':\r\n            return { ...state, [action.todolistId]: state[action.todolistId].filter(el => el.id !== action.taskId) }\r\n        case 'ADD-TASK':\r\n            return { ...state, [action.task.todoListId]: [...state[action.task.todoListId], {...action.task, entityStatus: 'idle'}] }\r\n        case 'UPDATE_TASK': \r\n            return {\r\n                ...state, \r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(el => el.id === action.taskId ? { ...el, ...action.updateModel } : el)\r\n            }\r\n        case 'ADD-TODOLIST':\r\n            return { ...state, [action.todolist.id]: [] }\r\n        case 'CHANGE-TASK-ENTITY-STATUS':\r\n            return { ...state, [action.todolistId]: state[action.todolistId]\r\n                .map(t=>t.id===action.taskId?{...t, entityStatus: action.entityStatus}:t)}\r\n        case 'SET_TODOLISTS': {\r\n            const stateCopy = { ...state }\r\n            action.todolists.forEach((tl) => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy;\r\n        }\r\n        case 'SET_TASKS': \r\n            return {...state,[action.todolistId]:action.tasks.map(t=>({...t, entityStatus: 'idle'}))}\r\n        case 'REMOVE-TODOLIST':\r\n            const copyState = { ...state }\r\n            delete copyState[action.todolistId]\r\n            return copyState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n// action\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => \r\n    ({ type: 'REMOVE-TASK', todolistId, taskId } as const)\r\nexport const addTaskAC = (task: TaskType) => \r\n    ({ type: 'ADD-TASK', task } as const)\r\nexport const updateTaskAC = (taskId: string, updateModel: UpdateModelType, todolistId: string) => \r\n    ({ type: 'UPDATE_TASK', updateModel, todolistId, taskId } as const)\r\nexport const setTaskAC = (tasks:TaskType[], todolistId: string) => \r\n    ({ type: 'SET_TASKS', tasks, todolistId } as const) \r\nexport const changeTaskEntityStatusAC = (entityStatus: RequestStatusType, taskId:string, todolistId: string) => \r\n    ({type:'CHANGE-TASK-ENTITY-STATUS', entityStatus, taskId, todolistId} as const)\r\n// thunk\r\nexport const fetchTasks = (todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTasksTodolist(todolistId)\r\n        let tasks = res.data.items.reverse()\r\n        dispatch(setTaskAC(tasks, todolistId))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTaskTC = (taskId: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTask(todolistId, taskId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(removeTaskAC(taskId, todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTask = (title: string, todolistId: string) => async (dispatch: DispatchTaskType) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTask(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(addTaskAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTask = (taskId: string, updateModel: UpdateModelType, todolistId: string) =>\r\n    async (dispatch: DispatchTaskType, getState: () => AppRootStateType) => {\r\n        dispatch(setAppStatusAC('loading'))\r\n        dispatch(changeTaskEntityStatusAC('loading', taskId, todolistId))\r\n        const task = getState().tasks1[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            let model: UpdateTaskModelType = {\r\n                title: task.title,\r\n                description: task.description,\r\n                status: task.status,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...updateModel\r\n            }\r\n            try {\r\n                let res = await todolistAPI.updateTask(todolistId, taskId, model)\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(updateTaskAC(taskId, updateModel, todolistId))\r\n                    dispatch(setAppStatusAC('succeeded'))\r\n                    dispatch(changeTaskEntityStatusAC('succeeded', taskId, todolistId))\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch)\r\n                    dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n                }\r\n            } catch (error) {\r\n                handleServerNetworkError(error, dispatch)\r\n                dispatch(changeTaskEntityStatusAC('failed', taskId, todolistId))\r\n            }\r\n        }\r\n    }\r\n// types\r\ntype ActionType = \r\n| ReturnType<typeof removeTaskAC>\r\n| ReturnType<typeof addTaskAC>\r\n| ReturnType<typeof updateTaskAC>\r\n| ReturnType<typeof setTaskAC>\r\n| ReturnType<typeof changeTaskEntityStatusAC>\r\n| AddTodolistActionType\r\n| RemoveTodolistActionType\r\n| SetTodolistsActionType\r\n\r\ntype DispatchTaskType = Dispatch<ActionType | SetAppStatusType | SetAppErrorType>","import { TextField } from \"@material-ui/core\";\r\nimport React, { ChangeEvent, useState } from \"react\";\r\n\r\nexport type EditableSpanPropsType = {\r\n  disabled: boolean\r\n  isDone?: boolean;\r\n  title: string;\r\n  onChange: (newTitle: string) => void;\r\n};\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n  console.log(\"EditableSpan\");\r\n  let [editMode, setEditMode] = useState<boolean>(false);\r\n  let [title, setTitle] = useState(\"\");\r\n  const activateViewMode = () => {\r\n    setEditMode(false);\r\n    props.onChange(title);\r\n  };\r\n  const activateEditMode = () => {\r\n    if(props.disabled){\r\n      setEditMode(true);\r\n      setTitle(props.title);\r\n    }\r\n  };\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n  return editMode ? (\r\n    <TextField\r\n      value={title}\r\n      onChange={changeTitle}\r\n      onBlur={activateViewMode}\r\n      autoFocus\r\n    />\r\n  ) : (\r\n    <span\r\n      onDoubleClick={activateEditMode}\r\n      title={\"to change it use a double click\"}\r\n      className={props.isDone ? \"is-done\" : \"\"}\r\n    >\r\n      {props.title}\r\n    </span>\r\n  );\r\n});\r\n","import React, { ChangeEvent, useCallback } from 'react';\r\nimport {  Checkbox, IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport { EditableSpan } from '../../../../components/EditableSpan/EditableSpan';\r\nimport { TaskStatuses, TaskDomainType } from '../../../../api/todolist-api';\r\n\r\nexport type TaskPropsType = {\r\n    id:string\r\n    task: TaskDomainType\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n}\r\n \r\nexport const Task = React.memo((props:TaskPropsType) => {\r\n  const onRemoveHandler = useCallback(() => props.removeTask(props.task.id, props.id),[props.removeTask,props.task.id, props.id]);\r\n  const onChangeStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n    props.changeTaskStatus(props.task.id, e.currentTarget.checked?TaskStatuses.Completed:TaskStatuses.New, props.id);\r\n  },[props.changeTaskStatus, props.task.id, props.id])\r\n  const onChangeTitleHandler = useCallback((newTitle: string) => {\r\n    props.changeTaskTitle(props.task.id, newTitle, props.id);\r\n  },[props.changeTaskTitle,props.task.id,props.id]);\r\n  return (\r\n    <div key={props.task.id} style={{ fontSize: \"19px\" }}>\r\n      <Checkbox\r\n        color=\"primary\"\r\n        checked={props.task.status===TaskStatuses.Completed}\r\n        onChange={onChangeStatusHandler}\r\n      />\r\n      <EditableSpan\r\n        disabled={props.task.entityStatus!=='loading'}\r\n        onChange={onChangeTitleHandler}\r\n        title={props.task.title}\r\n        isDone={props.task.status===TaskStatuses.Completed}\r\n      />\r\n      <IconButton onClick={onRemoveHandler} disabled={props.task.entityStatus==='loading'}>\r\n        <Delete />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});","import { Button,  IconButton } from '@material-ui/core';\r\nimport { Delete } from '@material-ui/icons';\r\nimport React, { useCallback, useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm';\r\nimport { TaskStatuses, TaskDomainType } from '../../../api/todolist-api';\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan';\r\nimport { fetchTasks } from '../tasks-reducer';\r\nimport { filtersValueType, TodolistDomainType } from '../todolists-reducer';\r\nimport { Task } from './task/Task';\r\n\r\nexport type TodoListPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskDomainType>\r\n    removeTask: (id: string, todolistdId:string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses,todolistdId:string) => void\r\n    changeTaskTitle:(id: string, newTitile:string, todolistdId:string)=>void\r\n    changeFilter: (value: filtersValueType,todolistdId:string) => void\r\n    addTasks: (title: string,todolistdId:string) => void\r\n    removeTodolist:(todolistdId:string)=>void\r\n    changeTodoListTitle:(newTitile:string, todolistdId:string)=>void\r\n}\r\n\r\nconst TodoList = React.memo((props: TodoListPropsType) => {\r\n  const dispatch = useDispatch()\r\n  useEffect(()=>{\r\n    dispatch(fetchTasks(props.todolist.id))\r\n  },[])\r\n  console.log('TodoList');\r\n  let tasksForTodolist = props.tasks\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.New);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = props.tasks.filter((r) => r.status===TaskStatuses.Completed);\r\n  }\r\n    const onClickAllHandler = useCallback(() => props.changeFilter('all',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickActiveHandler = useCallback(() => props.changeFilter('active',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClicCompletedHandler = useCallback(() => props.changeFilter('completed',props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onClickRemoveTodoList = useCallback(()=>props.removeTodolist(props.todolist.id), [props.todolist.id, props.removeTodolist])\r\n    const addItem = useCallback((title:string)=>props.addTasks(title,props.todolist.id),[props.addTasks, props.todolist.id])\r\n    const changeTodoListTitle=useCallback((newTitle:string)=>props.changeTodoListTitle(newTitle,props.todolist.id),[props.changeTodoListTitle,props.todolist.id])\r\n    return (\r\n      <div>\r\n        <h3>\r\n          <EditableSpan title={props.todolist.title} onChange={changeTodoListTitle} disabled={props.todolist.entityStatus!=='loading'}/>\r\n          <IconButton onClick={onClickRemoveTodoList} disabled={props.todolist.entityStatus==='loading'}>\r\n            <Delete />\r\n          </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addItem} disabled={props.todolist.entityStatus==='loading'}/>\r\n        <div>\r\n          {tasksForTodolist.map((t) => {\r\n            return <Task changeTaskStatus={props.changeTaskStatus}\r\n                         changeTaskTitle={props.changeTaskTitle}\r\n                         removeTask={props.removeTask}\r\n                         task={t}\r\n                         id={props.todolist.id}\r\n                         key={t.id}/>\r\n            })}\r\n        </div>\r\n        <div>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"all\" ? \"contained\" : \"text\"}\r\n            onClick={onClickAllHandler}\r\n            color='default'\r\n          >\r\n            All\r\n          </Button>\r\n          <Button\r\n            style={{margin:'0 5px'}}\r\n            size='small'\r\n            variant={props.todolist.filter === \"active\" ? \"contained\" : \"text\"}\r\n            onClick={onClickActiveHandler}\r\n            color='primary'>\r\n            Active\r\n          </Button>\r\n          <Button\r\n            size='small'\r\n            variant={props.todolist.filter === \"completed\" ? \"contained\" : \"text\"}\r\n            onClick={onClicCompletedHandler}\r\n            color='secondary'>\r\n            Completed\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n})\r\nexport default TodoList;\r\n\r\n","import { todolistAPI } from '../../api/todolist-api';\r\nimport { TodolistType } from '../../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { RequestStatusType, SetAppErrorType, setAppStatusAC, SetAppStatusType } from '../../app/app-reducer';\r\nimport { handleServerAppError, handleServerNetworkError } from '../../utils/error-utils';\r\n\r\nexport const todolistsReducer = (state:Array<TodolistDomainType> = [], action: ActionType):Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl=>tl.id!==action.todolistId)\r\n        case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n            return state.map(tl=>tl.id===action.todolistId?{...tl, entityStatus:action.entityStatus}:tl)\r\n        case 'ADD-TODOLIST':\r\n            return[{ ...action.todolist, filter:\"all\", entityStatus: 'idle'},...state]\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, title: action.title}:tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.todolistId?{...tl, filter:action.filter}:tl)\r\n        case 'SET_TODOLISTS':\r\n            return action.todolists.map(tl=>({...tl, filter:'all', entityStatus: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n }\r\n//action\r\nexport const RemoveTodolistAC = (todolistId: string) => \r\n    ({ type: 'REMOVE-TODOLIST', todolistId } as const)\r\nexport const AddTodolistAC = (todolist: TodolistType) => \r\n    ({ type: \"ADD-TODOLIST\", todolist } as const)\r\nexport const ChangeTodolistTitleAC = (todolistId: string, title: string) => \r\n    ({ type: 'CHANGE-TODOLIST-TITLE', todolistId, title } as const )\r\nexport const ChangeTodolistFilterAC = (todolistId: string, filter: filtersValueType) => \r\n    ({ type: 'CHANGE-TODOLIST-FILTER', todolistId, filter } as const)\r\nexport const SetTodolistAC = (todolists: TodolistType[]) => \r\n    ({ type: 'SET_TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatusAC = (entityStatus: RequestStatusType, todolistId:string) => \r\n    ({type:'CHANGE-TODOLIST-ENTITY-STATUS', entityStatus, todolistId} as const)\r\n//thunks\r\nexport const fetchTodolists = () => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.getTodolists()\r\n        dispatch(SetTodolistAC(res.data))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistEntityStatusAC('loading', todolistId))\r\n    try {\r\n        let res = await todolistAPI.deleteTodolist(todolistId)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(RemoveTodolistAC(todolistId))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const createTodolist = (title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.createTodolist(title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(AddTodolistAC(res.data.data.item))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\nexport const updateTodolist = (todolistId: string, title: string) => async (dispatch: Dispatch<DispatchTodolistType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    try {\r\n        let res = await todolistAPI.updateTodolistTitle(todolistId, title)\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(ChangeTodolistTitleAC(todolistId, title))\r\n            dispatch(setAppStatusAC('succeeded'))\r\n        } else {\r\n            handleServerAppError(res.data, dispatch)\r\n        }\r\n    } catch (error) {\r\n        handleServerNetworkError(error, dispatch)\r\n    }\r\n}\r\n// types\r\nexport type RemoveTodolistActionType = ReturnType<typeof RemoveTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof AddTodolistAC>\r\nexport type SetTodolistsActionType = ReturnType<typeof SetTodolistAC>\r\nexport type ChangeTodolistEntityStatusType = ReturnType<typeof changeTodolistEntityStatusAC>\r\n\r\ntype ActionType = \r\n| RemoveTodolistActionType\r\n| AddTodolistActionType\r\n| SetTodolistsActionType\r\n| ReturnType<typeof ChangeTodolistTitleAC>\r\n| ReturnType<typeof ChangeTodolistFilterAC>\r\n| ChangeTodolistEntityStatusType\r\n\r\nexport type filtersValueType = 'all' | 'active' | 'completed'\r\n\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: filtersValueType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype DispatchTodolistType = ActionType|SetAppStatusType|SetAppErrorType","import { Grid, Paper } from \"@material-ui/core\";\r\nimport React, { useCallback, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { TaskStatuses } from \"../../api/todolist-api\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport { AddItemForm } from \"../../components/AddItemForm/AddItemForm\";\r\nimport { createTask, removeTaskTC, updateTask } from \"./tasks-reducer\";\r\nimport TodoList from \"./todolist/Todolist\";\r\nimport {\r\n  ChangeTodolistFilterAC,\r\n  createTodolist,\r\n  fetchTodolists,\r\n  filtersValueType,\r\n  removeTodolistTC,\r\n  updateTodolist,\r\n} from \"./todolists-reducer\";\r\n\r\ntype TodoPropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodolistList: React.FC<TodoPropsType> = ({demo = false}) => {\r\n  const dispatch = useDispatch();\r\n  const { todoLists, tasks1 } = useSelector<AppRootStateType, AppRootStateType>(\r\n    (state) => state\r\n  );\r\n  const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n  useEffect(() => {\r\n    if(demo||!isLoggedIn){\r\n      return\r\n    }\r\n    dispatch(fetchTodolists());\r\n  }, []);\r\n\r\n  const addTasks = useCallback(\r\n    (title: string, todolistId: string) => {\r\n      dispatch(createTask(title, todolistId));\r\n      changeFilter(\"all\", todolistId);\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTask = useCallback(\r\n    (id: string, todolistId: string) => {\r\n      dispatch(removeTaskTC(id, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeStatus = useCallback(\r\n    (id: string, status: TaskStatuses, todolistId: string) => {\r\n      dispatch(updateTask(id, { status }, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeFilter = useCallback(\r\n    (value: filtersValueType, todolistId: string) => {\r\n      dispatch(ChangeTodolistFilterAC(todolistId, value));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const removeTodolist = useCallback(\r\n    (todolistId: string) => {\r\n      dispatch(removeTodolistTC(todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const addTodoList = useCallback(\r\n    (title: string) => {\r\n      dispatch(createTodolist(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTaskTitle = useCallback(\r\n    (id: string, newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTask(id, { title: newTitile }, todolistdId));\r\n    },\r\n    [dispatch]\r\n  );\r\n  const changeTodoListTitle = useCallback(\r\n    (newTitile: string, todolistdId: string) => {\r\n      dispatch(updateTodolist(todolistdId, newTitile));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Grid container style={{ padding: \"20px\" }}>\r\n        <AddItemForm addItem={addTodoList} />\r\n      </Grid>\r\n      <Grid container spacing={3}>\r\n        {todoLists.map((el) => {\r\n          let tasksForTodolist = tasks1[el.id];\r\n          return (\r\n            <Grid item key={el.id}>\r\n              <Paper elevation={8} style={{ padding: \"10px\" }}>\r\n                <TodoList\r\n                  todolist={el}\r\n                  tasks={tasksForTodolist}\r\n                  removeTask={removeTask}\r\n                  changeFilter={changeFilter}\r\n                  addTasks={addTasks}\r\n                  changeTaskStatus={changeStatus}\r\n                  removeTodolist={removeTodolist}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n              </Paper>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { AppRootStateType } from \"../../app/store\";\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<AppRootStateType,string|null>(state=>state.app.error) \r\n  const dispatch = useDispatch()  \r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    if (reason === \"clickaway\") {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={!!error} autoHideDuration={3000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\">\r\n        {error?error:'Some error'}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport { useFormik } from 'formik';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { loginTC } from './auth-reducer';\r\nimport { AppRootStateType } from '../../app/store'\r\nimport { Redirect } from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n }\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n     \r\n    const formik = useFormik({\r\n      initialValues: {\r\n        email: \"\",\r\n        password: \"\",\r\n        rememberMe: false,\r\n      },\r\n      validate: (values) => {\r\n        const errors: FormikErrorType = {};\r\n        if (!values.email) {\r\n          errors.email = \"Required\";\r\n        } else if (\r\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n        ) {\r\n          errors.email = \"Invalid email address\";\r\n        }\r\n        if(!values.password){\r\n            errors.password = \"Required\";\r\n        } else if (values.password.length<4){\r\n            errors.password = \"Invalid password. Min length 4 symbol\";\r\n        }\r\n        return errors;\r\n      },\r\n      onSubmit: (values) => {\r\n        dispatch(loginTC(values))\r\n      },\r\n    });\r\n    if(isLoggedIn){\r\n        return <Redirect to={'/TodoList'}/>\r\n    }\r\n   return (\r\n     <Grid container justify=\"center\">\r\n       <Grid item xs={4}>\r\n         <FormControl>\r\n           <FormLabel>\r\n             <p>\r\n               To log in get registered\r\n               <a\r\n                 href={\"https://social-network.samuraijs.com/\"}\r\n                 target={\"blank\"}\r\n               >\r\n                 here\r\n               </a>\r\n             </p>\r\n             <p>or use common test account credentials:</p>\r\n             <p>Email: alkhovikvlad@gmail.com</p>\r\n             <p>Password: itkamasutra</p>\r\n           </FormLabel>\r\n           <form onSubmit={formik.handleSubmit}>\r\n             <FormGroup>\r\n               <TextField\r\n                 label=\"Email\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"email\")}\r\n               />\r\n               {formik.touched.email&&formik.errors.email\r\n               ?<div style={{color:'red'}}>{formik.errors.email}</div>\r\n               :null}\r\n               <TextField\r\n                 type=\"password\"\r\n                 label=\"Password\"\r\n                 margin=\"normal\"\r\n                 {...formik.getFieldProps(\"password\")}\r\n               />\r\n               {formik.touched.password&&formik.errors.password\r\n               ?<div style={{color:'red'}}>{formik.errors.password}</div>\r\n               :null}\r\n               <FormControlLabel\r\n                 label={\"Remember me\"}\r\n                 control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n               />\r\n               <Button disabled={!!formik.errors.email||!!formik.errors.password} type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                 Login\r\n               </Button>\r\n             </FormGroup>\r\n           </form>\r\n         </FormControl>\r\n       </Grid>\r\n     </Grid>\r\n   );\r\n}\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './App.css';\r\nimport { AppBar, Button, CircularProgress, Container, IconButton, LinearProgress, Toolbar, Typography } from '@material-ui/core';\r\nimport { Menu } from '@material-ui/icons';\r\nimport {  TaskDomainType } from '../api/todolist-api';\r\nimport { TodolistList } from '../features/todolistList/TodolistList';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootStateType } from './store';\r\nimport { ErrorSnackbar } from '../components/ErrorSnackbar/ErrorSnackbar';\r\nimport { initialazedTC, RequestStatusType } from './app-reducer';\r\nimport { Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from '../features/login/login';\r\nimport { logoutTC } from '../features/login/auth-reducer';\r\n\r\nexport type TasksStateType = {\r\n    [key:string]:Array<TaskDomainType>\r\n} \r\ntype AppPropsType = {\r\n  demo?: boolean\r\n}\r\n\r\nfunction AppWithRedux({demo = false}: AppPropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state=>state.app.status)    \r\n    const isInitialazed = useSelector<AppRootStateType, boolean>(state=>state.app.isInitialazed)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state=>state.auth.isLoggedIn)\r\n    const login = useSelector<AppRootStateType, string|null>(state=>state.app.login)\r\n    const dispatch = useDispatch()\r\n\r\n    const logout = () => {\r\n      dispatch(logoutTC())\r\n    }\r\n\r\n    useEffect(()=>{\r\n      dispatch(initialazedTC())\r\n    },[])\r\n    if (!isInitialazed) {\r\n      return (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"30%\",\r\n            textAlign: \"center\",\r\n            width: \"100%\",\r\n          }}\r\n        >\r\n          <CircularProgress />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div className=\"App\">\r\n        <ErrorSnackbar/>\r\n        <AppBar position=\"static\">\r\n          <Toolbar>\r\n            <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n              <Menu />\r\n            </IconButton>\r\n            <Typography variant=\"h6\">{login}</Typography>\r\n            {isLoggedIn&&<Button color=\"inherit\" onClick={logout}>Log out</Button>}\r\n          </Toolbar>\r\n          <div style={{height:'4px'}}>\r\n            {status==='loading'&&<LinearProgress/>}\r\n          </div>\r\n        </AppBar>\r\n        <Container fixed>\r\n          <Switch>\r\n            <Route exact path = {'/TodoList'} render={() => <TodolistList demo={demo}/>} />\r\n            <Route path = {'/login'} render={() => <Login/>} />\r\n            <Route path={ '/404' } render={ () => <h1>404: PAGE NOT FOUND</h1> }/>\r\n            <Redirect from={ '*' } to={ '/404' }/>\r\n          </Switch>\r\n        </Container>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\nexport default AppWithRedux;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { authReducer } from './../features/login/auth-reducer';\r\nimport { appReducer } from './app-reducer';\r\nimport { tasksReducer } from '../features/todolistList/tasks-reducer';\r\nimport { todolistsReducer } from '../features/todolistList/todolists-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\n\r\nconst rootReducer = combineReducers({\r\n    todoLists: todolistsReducer,\r\n    tasks1: tasksReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n})\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer,applyMiddleware(thunk))\r\n\r\n//@ts-ignore\r\nwindow.store = store","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport AppWithRedux from \"./app/App\";\r\nimport \"./index.css\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { store } from \"./app/store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <Provider store={store}>\r\n      <AppWithRedux />\r\n    </Provider>\r\n  </BrowserRouter>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}